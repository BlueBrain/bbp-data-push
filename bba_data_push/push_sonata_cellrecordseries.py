"""
Create a 'CellRecordSeries' resource payload to push into Nexus. This script has been 
designed to function with sonata h5 files storing 3D brain cell positions and 
orientations and generated by the Atlas pipeline.
To know more about 'Mesh' resources and Nexus, see https://bluebrainnexus.io.
Link to BBP Atlas pipeline confluence documentation: 
https://bbpteam.epfl.ch/project/spaces/x/rS22Ag
"""

import os
import yaml
import h5py
from kgforge.core import Resource
from kgforge.specializations.stores.demo_store import DemoStore

from bba_data_push.commons import add_contribution, append_provenance_to_description
from bba_data_push.logging import create_log_handler

L = create_log_handler(__name__, "./push_cellrecord.log")


def create_cell_record_resources(
    forge,
    inputpath: list,
    voxels_resolution: int,
    config_path,
    provenances: list,
    verbose,
) -> list:
    """
    Construct the input sonata hdf5 dataset property payloads that will be push with
    the corresponding files into Nexus as a resource.

    Parameters:
        forge : instantiated and configured forge object.
        inputpath : input datasets paths. These datasets are either volumetric files
                    or folder containing volumetric files.
        voxels_resolution : voxel resolution value.
        config_path : configuration yaml file path containing the names and paths of
                      the atlas-pipeline generated datasets.
        provenances : string name of the module that generated input datasets.

    Returns:
        datasets : list containing as much Resource object as input datasets. Each
                   Resource is defined by an attached input file and its properties
                   described in a payload.
    """
    L.setLevel(verbose)

    config_file = open(config_path)
    config_content = yaml.safe_load(config_file.read().strip())
    config_file.close()
    try:
        sonata_path = config_content["GeneratedDatasetPath"]["CellRecordsFile"]
    except KeyError as error:
        L.error(
            f"KeyError: {error}. The key ['GeneratedDatasetPath']['CellRecordsFile'] "
            "is not found in the dataset configuration file"
        )
        exit(1)

    # Constructs the Resource properties payloads accordingly to the input atlas cell
    # record datasets
    Measures_table = {
        "x": "Cell position along the X axis",
        "y": "Cell position along the Y axis",
        "z": "Cell position along the Z axis",
        "orientation_w": "Component w of the cell orientation quaternion",
        "orientation_x": "Component x of the cell orientation quaternion",
        "orientation_y": "Component y of the cell orientation quaternion",
        "orientation_z": "Component z of the cell orientation quaternion",
        "cell_type": "Label of the cell type",
        "region_id": "Region identifiers (AIBS Structure IDs)",
    }

    # Constants
    module_prov = "positions-and-orientations"
    spatial_unit = "Âµm"
    atlas_reference_system_id = (
        "https://bbp.epfl.ch/neurosciencegraph/data/"
        "allen_ccfv3_spatial_reference_system"
    )
    id_atlas_release = (
        "https://bbp.epfl.ch/neurosciencegraph/data/"
        "e2e500ec-fe7e-4888-88b9-b72425315dda"
    )
    region_id = 997  # default: 997 --> root, whole brain
    region_name = "root"
    # Link to the spatial ref system
    isRegisteredIn = {
        "@type": ["BrainAtlasSpatialReferenceSystem", "AtlasSpatialReferenceSystem"],
        "@id": atlas_reference_system_id,
    }

    brainLocation = {
        "brainRegion": {"@id": f"mba:{region_id}", "label": region_name},
        "atlasSpatialReferenceSystem": {
            "@type": [
                "BrainAtlasSpatialReferenceSystem",
                "AtlasSpatialReferenceSystem",
            ],
            "@id": atlas_reference_system_id,
        },
    }

    subject = {
        "@type": "Subject",
        "species": {
            "@id": "http://purl.obolibrary.org/obo/NCBITaxon_10090",
            "label": "Mus musculus",
        },
    }

    # Create contribution
    if isinstance(forge._store, DemoStore):
        contribution = []
    else:
        try:
            contribution, log_info = add_contribution(forge)
            L.info("\n".join(log_info))
        except Exception as e:
            L.error(f"Error: {e}")
            exit(1)

    # If multiple files and multiple Atlas
    for filepath in inputpath:
        try:
            if os.path.samefile(filepath, sonata_path["cell_records_sonata"]):
                if filepath.endswith(".h5"):
                    atlas_description = "Mouse ccfv2-ccfv3 Hybrid annotation volume"
                else:
                    L.error(
                        f"Error: cell-record sonata dataset '{filepath}' is not a "
                        "sonata .h5 file"
                    )
                    exit(1)
            else:
                L.error(
                    f"Error: The '{filepath}' folder do not correspond to a Sonata .h5 "
                    "file dataset defined in the CellPositionFile section of the input "
                    "datasets configuration file"
                )
                exit(1)
        except FileNotFoundError as e:
            L.error(f"FileNotFoundError: {e}")
            exit(1)

        # We create a 1st payload which will serve as template for the others
        filename_noext = os.path.splitext(os.path.basename(filepath))[0]
        # file_extension = os.path.splitext(os.path.basename(filepath))[1][1:] if needed

        description = (
            f"Sonata .h5 file storing the 3D cell positions and orientations of the "
            f"{atlas_description} (spatial resolution of {voxels_resolution} "
            f"{spatial_unit})."
        )

        if provenances[0]:
            try:
                prov_description = append_provenance_to_description(
                    provenances, module_prov
                )
                description = f"{description} {prov_description}"
            except ValueError as e:
                L.error(f"Value Error in provenance content. {e}")
                exit(1)
        try:
            cell_collections = h5py.File(filepath, "r")
        except OSError as e:
            L.error(f"OSError when trying to open the input file {filepath}. {e}")
            L.info("Aborting pushing process.")  # setLevel(logging.INFO)
            exit(1)

        recordMeasure = []
        try:
            sonata_datasets = cell_collections["nodes"]["atlas_cells"]["0"]
            for sonata_dataset in sonata_datasets.keys():
                if sonata_dataset in Measures_table:
                    Measure_payload = {
                        "@type": "RecordMeasure",
                        "description": Measures_table[sonata_dataset],
                        "componentEncoding": f"{sonata_datasets[sonata_dataset].dtype}",
                        "name": f"{sonata_dataset}",
                    }
                    if sonata_dataset == "cell_type":
                        cell_types = sonata_datasets["@library"]["cell_type"]
                        if all(isinstance(x, bytes) for x in cell_types):
                            cell_types = [s.decode("UTF-8") for s in cell_types]
                        elif any(isinstance(x, bytes) for x in cell_types):
                            L.error(
                                "ValueError: @library/cell_type contains string and "
                                "bytes (literal string). The content need to be uniform"
                            )
                            exit(1)
                        Measure_payload["label"] = {
                            f"{i}": cell_types[i] for i in range(0, len(cell_types))
                        }
                        # labels
                    recordMeasure.append(Measure_payload)
        except KeyError as e:
            L.error(
                f"KeyError during the information extraction of the dataset in the "
                f"input file {filepath}. {e}"
            )
            exit(1)

        try:
            numberOfRecords = {
                "@type": "xsd:long",
                "@value": cell_collections.get("/nodes/atlas_cells/0/x").shape[0],
            }
        except KeyError as e:
            L.error(
                f"KeyError during the information extraction of the dataset in the "
                f"input file {filepath}. {e}"
            )
            exit(1)

        # add personalised content_type = "application/" + extension (according to
        # mime convention)
        distribution_file = forge.attach(filepath)
        cellrecord_resource = Resource(
            type=["CellRecordSeries", "Dataset"],  # Dataset
            name=filename_noext.replace("_", " ").title(),
            distribution_file=distribution_file,
            description=description,  #
            atlasRelease={"@id": id_atlas_release},  #
            isRegisteredIn=isRegisteredIn,  #
            brainLocation=brainLocation,
            recordMeasure=recordMeasure,
            numberOfRecords=numberOfRecords,
            bufferEncoding="binary",
            subject=subject,
            contribution=contribution,
        )
        # resource.fileExtension = config["file_extension"]
        # dataset = Dataset.from_resource(forge, cellrecord_resource,
        # store_metadata=True) #several dataset = datasets

        # dataSampleModality=["parcellationId", "cellTypeId", "position3D",
        # "eulerAngle"],

        datasets = [cellrecord_resource]

    return datasets

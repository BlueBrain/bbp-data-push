"""
Create a 'VolumetricDataLayer' resource payload to push into Nexus. This script has 
been designed to function with volumetric files generated by the Atlas pipeline.
To know more about 'VolumetricDataLayer' resources and Nexus, see 
https://bluebrainnexus.io.
Link to BBP Atlas pipeline confluence documentation: 
https://bbpteam.epfl.ch/project/spaces/x/rS22Ag
"""

import os
import yaml
import numpy as np
import nrrd
import fnmatch
from datetime import datetime
from uuid import uuid4
from kgforge.core import Resource
from kgforge.specializations.stores.demo_store import DemoStore

from bba_data_push.commons import (
    get_voxel_type,
    add_contribution,
    append_provenance_to_description,
)
from bba_data_push.logging import create_log_handler

L = create_log_handler(__name__, "./push_volumetric.log")


def create_volumetric_resources(
    forge,
    inputpath: list,
    voxels_resolution: int,
    config_path,
    provenances: list,
    new_atlasrelease_hierarchy_path,
    verbose,
) -> list:
    """
    Construct the input volumetric dataset property payloads that will be push with
    the corresponding files into Nexus as a resource.

    Parameters:
        forge : instantiated and configured forge object.
        inputpath : input datasets paths. These datasets are either volumetric files
                    or folder containing volumetric files.
        voxels_resolution : voxel resolution value.
        config_path : configuration yaml file path containing the names and paths of
                      the atlas-pipeline generated datasets.
        provenances : string name of the module that generated input datasets.

    Returns:
        dataset : list containing as much Resource object as input datasets. Each
        Resource is defined by an attached input file and its properties described in
        a payload.
    """
    L.setLevel(verbose)

    config_file = open(config_path)
    config_content = yaml.safe_load(config_file.read().strip())
    config_file.close()
    try:
        volumetric_path = config_content["GeneratedDatasetPath"]["VolumetricFile"]
    except KeyError as error:
        L.error(
            f"KeyError: {error}. The key ['GeneratedDatasetPath']['VolumetricFile'] is "
            "not found in the dataset configuration file."
        )
        exit(1)

    # For a new atlas release creation verify that the right parcellation volume has
    # been provided
    if new_atlasrelease_hierarchy_path:
        for inputdata in inputpath:
            if os.path.samefile(volumetric_path["annotation_l23split"], inputdata):
                file_found = True
                break
        if not file_found:
            L.error(
                "Error: The argument 'new-atlasrelease-hierarchy-path' has been "
                "provided but the parcellation volume corresponding to the Atlas "
                "Release (aka 'annotation_l23split' in the dataset configuration file) "
                "is missing among the input datasets."
            )
            exit(1)

    # Mutual resource properties

    atlas_reference_system_id = (
        "https://bbp.epfl.ch/neurosciencegraph/data/"
        "allen_ccfv3_spatial_reference_system"
    )

    region_id = 997  # default: 997 --> root, whole brain
    region_name = "root"

    # Link to the spatial ref system
    isRegisteredIn = {
        "@type": ["BrainAtlasSpatialReferenceSystem", "AtlasSpatialReferenceSystem"],
        "@id": atlas_reference_system_id,
    }

    brainLocation = {
        "brainRegion": {"@id": f"mba:{region_id}", "label": region_name},
        "atlasSpatialReferenceSystem": {
            "@type": [
                "BrainAtlasSpatialReferenceSystem",
                "AtlasSpatialReferenceSystem",
            ],
            "@id": atlas_reference_system_id,
        },
    }

    subject = {
        "@type": "Subject",
        "species": {
            "@id": "http://purl.obolibrary.org/obo/NCBITaxon_10090",
            "label": "Mus musculus",
        },
    }

    # Create contribution
    if isinstance(forge._store, DemoStore):
        contribution = []
    else:
        try:
            contribution, log_info = add_contribution(forge)
            L.info("\n".join(log_info))
        except Exception as e:
            L.error(f"Error: {e}")
            exit(1)

    # Config constants
    default_sampling_period = 30
    default_sampling_time_unit = "ms"
    spatial_unit = "µm"

    # Resource payload properties values corresponding to the different possible Atlas
    # volumetric datasets
    resource_type = "VolumetricDataLayer"
    description_hybrid = (
        f"Hybrid annotation volume from ccfv2 and ccfv3 at {voxels_resolution} "
        "microns"
    )
    description_split = (
        f"{description_hybrid} with the isocortex layer 2 and 3 split. The "
        f"resolution is {voxels_resolution} microns."
    )
    description_orientation = (
        "Quaternions field (w,x,y,z) defined over the ccfv2-ccfv3 Hybrid annotation "
        "volume (spatial resolution of 25 µm) and representing the neuron "
        "axone-to-dendrites orientation to voxels from the Isocortex region."
    )
    derivation_hybrid = [
        {
            "@type": "Derivation",
            "description": "The ccfv3 (2017) has smoother region borders, without "
            "jaggies. "
            "The enveloppe or most regions was used in this volume",
            "entity": {
                "@id": "https://bbp.epfl.ch/neurosciencegraph/data/"
                "025eef5f-2a9a-4119-b53f-338452c72f2a",
                "@type": "['VolumetricDataLayer', 'BrainParcellationDataLayer']",
            },
        },
        {
            "@type": "Derivation",
            "description": "The ccfv2 (2011) has a finer granularity than ccfv3 in "
            "term of leaf nodes, these were imported in this volume",
            "entity": {
                "@id": "https://bbp.epfl.ch/neurosciencegraph/data/"
                "7b4b36ad-911c-4758-8686-2bf7943e10fb",
                "@type": "['VolumetricDataLayer', 'BrainParcellationDataLayer']",
            },
        },
    ]
    derivation_split = {
        "@type": "Derivation",
        "description": "The separation between layer 2 and layer 3 was performed on "
        "the source volume.",
        "entity": {
            "@id": "https://bbp.epfl.ch/neurosciencegraph/data/"
            "7b2f498d-a20f-4992-8410-d8b44ec72c9a",
            "@type": "['VolumetricDataLayer', 'BrainParcellationDataLayer']",
        },
    }

    # Dictionary containing the possible volumetric dataset to push

    volumetric_data = {
        "parcellations": {
            f"{volumetric_path['annotation_hybrid']}": [
                "combine-annotations",
                f"{description_hybrid}. The version "
                "replaces the leaf regions in ccfv3 with the leaf region of "
                "ccfv2, which have additional levels of hierarchy.",
                derivation_hybrid,
                "atlasrelease_ccfv2v3",
            ],
            f"{volumetric_path['annotation_l23split']}": [
                "split-isocortex-layer-23",
                description_split,
                derivation_split,
                "last_atlasrelease",
            ],
        },
        "cell_densities": {
            f"{volumetric_path['cell_densities']}": [
                "glia-cell-densities",
                description_hybrid,
                "last_atlasrelease",
            ],
            f"{volumetric_path['neuron_densities']}": [
                "inhibitory-and-excitatory-neuron-densities",
                description_hybrid,
                "last_atlasrelease",
            ],
        },
        # "cell_orientations": {
        #     f"{volumetric_path['cell_orientations']}": [
        #         "orientation-field",
        #         description_orientation,
        #         derivation_split_but_without the description,
        #         "atlasrelease_ccfv2v3",
        #     ]
        # },
    }

    # Constructs the Resource properties payloads with the dictionary of properties
    datasets = []
    atlasreleases = []
    atlasrelease_dict = {}
    atlasRelease = {}
    fetch_atlasrelease = True
    for filepath in inputpath:
        file_found = False
        isFolder = False
        derivation = False
        isCellDensity = False
        for dataset in volumetric_data["cell_densities"]:
            try:
                if os.path.samefile(filepath, dataset):
                    file_found = True
                    isCellDensity = True
                    if os.path.isdir(filepath):
                        isFolder = True
                        directory = filepath
                        files = os.listdir(directory)
                        pattern = "*_density.nrrd"
                        files_nrrd = fnmatch.filter(files, pattern)
                        if not files_nrrd:
                            L.error(
                                f"Error: '{filepath}' do not contain any cell density "
                                "volumetric files."
                            )
                            exit(1)
                        # this is going ot be the "name" of the resource
                        filepath = os.path.join(directory, files_nrrd[0])
                        filename_noext = os.path.splitext(os.path.basename(filepath))[0]
                        file_extension = os.path.splitext(os.path.basename(filepath))[
                            1
                        ][1:]
                        cell_density_file = filename_noext.replace("_", " ")
                        cell_density_name = (
                            f"{cell_density_file[0].upper()}" f"{cell_density_file[1:]}"
                        )
                        voxel_type = "intensity"
                        resource_types = [
                            resource_type,
                            "GliaCellDensity",
                            "CellDensityDataLayer",
                        ]
                        description = (
                            f"{cell_density_name} volume for the "
                            f"{volumetric_data['cell_densities'][dataset][1]}."
                        )
                        module_tag = volumetric_data["cell_densities"][dataset][0]
                        break
                    else:
                        L.error(
                            f"Error: cell density dataset '{filepath}' is not a folder "
                            "containing cell densities .nrrd files"
                        )
                        exit(1)
            except FileNotFoundError as e:
                L.error(f"FileNotFoundError: {e}")
                exit(1)

        # Jump it if a file has been recognized
        if not file_found:
            for dataset in volumetric_data["parcellations"]:
                try:
                    if os.path.samefile(filepath, dataset):
                        if filepath.endswith(".nrrd"):
                            file_found = True
                            voxel_type = "label"
                            resource_types = [
                                resource_type,
                                "BrainParcellationDataLayer",
                            ]
                            description = (
                                f"{volumetric_data['parcellations'][dataset][1]}"
                            )
                            module_tag = volumetric_data["parcellations"][dataset][0]
                            derivation = volumetric_data["parcellations"][dataset][2]

                            # this is going ot be the "name" of the resource
                            filename_noext = os.path.splitext(
                                os.path.basename(filepath)
                            )[0]
                            file_extension = os.path.splitext(
                                os.path.basename(filepath)
                            )[1][1:]
                            break
                        else:
                            L.error(
                                f"Error: parcellation dataset '{filepath}' is not a "
                                "volumetric .nrrd file"
                            )
                            exit(1)
                except FileNotFoundError as e:
                    L.error(f"FileNotFoundError: {e}")
                    exit(1)

        # if not file_found:
        #     for dataset in volumetric_data["cell_orientations"]:
        #         try:
        #             if os.path.samefile(filepath, dataset):
        #                 if filepath.endswith(".nrrd"):
        #                     file_found = True
        #                     voxel_type = "vector"
        #                     resource_types = [
        #                         resource_type,
        #                         "CellOrientationField",
        #                     ]
        #                     description = (
        #                         f"{volumetric_data['cell_orientations'][dataset][1]}"
        #                     )
        #                     module_tag = volumetric_data["cell_orientations"][dataset]
        #                        [
        #                         0
        #                     ]
        #                     derivation = volumetric_data["cell_orientations"][dataset]
        #                        [
        #                         2
        #                     ]

        #                     # this is going ot be the "name" of the resource
        #                     filename_noext = os.path.splitext(
        #                         os.path.basename(filepath)
        #                     )[0]
        #                     file_extension = os.path.splitext(
        #                         os.path.basename(filepath)
        #                     )[1][1:]
        #                     break
        #                 else:
        #                     L.error(
        #                         f"Error: parcellation dataset '{filepath}' is not a "
        #                         "volumetric .nrrd file"
        #                     )
        #                     exit(1)
        #         except FileNotFoundError as e:
        #             L.error(f"FileNotFoundError: {e}")
        #             exit(1)

        # If still no file found at this step then raise error
        if not file_found:
            L.error(
                f"Error: '{filepath}' does not correspond to one of the datasets "
                "defined in the VolumetricFile section of the 'generated dataset' "
                "configuration file"
            )
            exit(1)

        if provenances[0]:
            try:
                prov_description = append_provenance_to_description(
                    provenances, module_tag
                )
                description = f"{description} {prov_description}"
            except ValueError as e:
                L.error(f"ValueError in provenance content. {e}")
                exit(1)

        # Parsing the header of the NRRD file
        header = None
        try:
            header = nrrd.read_header(filepath)
        except nrrd.errors.NRRDError as e:
            L.error(f"NrrdError: {e}")
            L.info("Aborting pushing process.")  # setLevel(logging.INFO)
            exit(1)

        config = {
            "file_extension": file_extension,
            "sampling_space_unit": spatial_unit,
            "sampling_period": default_sampling_period,
            "sampling_time_unit": default_sampling_time_unit,
        }
        if not isinstance(forge._store, DemoStore):
            if fetch_atlasrelease or os.path.samefile(
                volumetric_path["annotation_hybrid"], dataset
            ):
                if not os.path.samefile(volumetric_path["annotation_hybrid"], dataset):
                    fetch_atlasrelease = False
                atlasrelease_dict = return_atlasrelease(
                    forge,
                    config_content,
                    new_atlasrelease_hierarchy_path,
                    volumetric_data["parcellations"][dataset][3],
                    atlas_reference_system_id,
                    subject,
                )

            if isinstance(atlasrelease_dict["atlas_release"], list):
                atlasRelease = [
                    {
                        "@id": atlasrelease_dict["atlas_release"][0].id,
                        "@type": ["AtlasRelease", "BrainAtlasRelease"],
                    },
                    {
                        "@id": atlasrelease_dict["atlas_release"][1].id,
                        "@type": ["AtlasRelease", "BrainAtlasRelease"],
                    },
                ]
                if atlasrelease_dict["create_ccfv2v3"]:
                    atlasrelease_dict["atlas_release"][0].contribution = contribution
                    atlasrelease_dict["atlas_release"][1].contribution = contribution
                    atlasreleases.append(atlasrelease_dict["atlas_release"][0])
                    atlasreleases.append(atlasrelease_dict["atlas_release"][1])
            else:
                atlasRelease = {
                    "@id": atlasrelease_dict["atlas_release"].id,
                    "@type": ["AtlasRelease", "BrainAtlasRelease"],
                }
                atlasrelease_dict["atlas_release"].contribution = contribution
                atlasreleases.append(atlasrelease_dict["atlas_release"])

        # We create a 1st payload that will be recycled in case of multiple files to
        # push
        content_type = f"application/{file_extension}"
        distribution_file = forge.attach(filepath, content_type)

        resource_types.append("Dataset")
        nrrd_resource = Resource(
            type=resource_types,
            name=filename_noext.replace("_", " ").title(),
            distribution=distribution_file,
            description=description,
            isRegisteredIn=isRegisteredIn,
            brainLocation=brainLocation,
            atlasRelease=atlasRelease,
            subject=subject,
            contribution=contribution,
        )

        nrrd_resource = add_nrrd_props(nrrd_resource, header, config, voxel_type)

        if derivation:
            nrrd_resource.derivation = derivation

        # Link the atlasrelease to its parcellation
        if not isinstance(forge._store, DemoStore):
            if new_atlasrelease_hierarchy_path and os.path.samefile(
                volumetric_path["annotation_l23split"], dataset
            ):
                nrrd_resource.id = forge.format(
                    "identifier", "brainparcellationdatalayer", str(uuid4())
                )
                atlasrelease_dict["atlas_release"].parcellationVolume = {
                    "@id": nrrd_resource.id,
                    "@type": "BrainParcellationDataLayer",
                }

                atlasrelease_dict["hierarchy"].contribution = contribution
                atlasreleases.append(atlasrelease_dict["hierarchy"])

        datasets.append(nrrd_resource)

        # If the input is a folder containing the cell density file to push
        if isFolder:
            for f in range(1, len(files_nrrd)):  # start at the 2nd file
                filepath = os.path.join(directory, files_nrrd[f])
                filename_noext = os.path.splitext(os.path.basename(filepath))[0]
                if isCellDensity:
                    cell_density_file = filename_noext.replace("_", " ")
                    cell_density_name = (
                        f"{cell_density_file[0].upper()}" f"{cell_density_file[1:]}"
                    )
                    description = (
                        f"{cell_density_name} volume for the "
                        f"{volumetric_data['cell_densities'][dataset][1]}."
                    )
                if provenances[0]:
                    description = f"{description} {prov_description}"
                distribution_file = forge.attach(filepath, content_type)
                # Use forge.reshape instead ?
                nrrd_resources = Resource(
                    type=nrrd_resource.type,
                    name=filename_noext.replace("_", " ").title(),
                    distribution=distribution_file,
                    description=description,
                    contribution=nrrd_resource.contribution,
                    isRegisteredIn=nrrd_resource.isRegisteredIn,
                    brainLocation=nrrd_resource.brainLocation,
                    atlasRelease=nrrd_resource.atlasRelease,
                    componentEncoding=nrrd_resource.componentEncoding,
                    fileExtension=nrrd_resource.fileExtension,
                    dimension=nrrd_resource.dimension,
                    sampleType=nrrd_resource.sampleType,
                    worldMatrix=nrrd_resource.worldMatrix,
                    resolution=nrrd_resource.resolution,
                    bufferEncoding=nrrd_resource.bufferEncoding,
                    endianness=nrrd_resource.endianness,
                    subject=nrrd_resource.subject,
                )

                datasets.append(nrrd_resources)

    return datasets, atlasreleases


def return_atlasrelease(
    forge,
    config_content,
    new_atlasrelease_hierarchy_path,
    atlasrelease_choice,
    atlas_reference_system_id,
    subject,
):

    spatialReferenceSystem = {
        "@id": "https://bbp.epfl.ch/neurosciencegraph/data/"
        "allen_ccfv3_spatial_reference_system",
        "@type": "AtlasSpatialReferenceSystem",
    }

    # average brain model ccfv3
    brainTemplateDataLayer = {
        "@id": "https://bbp.epfl.ch/neurosciencegraph/data/"
        "dca40f99-b494-4d2c-9a2f-c407180138b7",
        "@type": "BrainTemplateDataLayer",
    }

    releaseDate = {
        "@type": "xsd:date",
        "@value": f"{datetime.today().strftime('%Y-%m-%d')}",
    }

    if atlasrelease_choice == "last_atlasrelease":
        if not new_atlasrelease_hierarchy_path:
            # Atlas release hybrid v2-v3 L2L3 split
            try:
                filters = {"name": "Allen Mouse CCF v2-v3 hybrid l2-l3 split"}
                atlasrelease_resource = forge.search(filters, limit=1)[0]
                atlasrelease_dict = {"atlas_release": atlasrelease_resource}
                if not atlasrelease_resource:
                    L.error(
                        "No BrainAtlasRelease 'Allen Mouse CCF v2-v3 hybrid l2-l3 "
                        "split' resource found in the destination project "
                        f"'{forge._store.bucket}'. Please provide the argument "
                        "--new-atlasrelease-hierarchy-path to first generate and "
                        "push a new atlas release resourceinto your project ."
                    )
                    exit(1)
            except Exception as e:
                L.error(
                    "Error when searching the BrainAtlasRelease Resource 'Allen "
                    "Mouse CCF v2-v3 hybrid l2-l3 split' in the destination "
                    f"project '{forge._store.bucket}'. {e}"
                )
                exit(1)
        else:
            description = (
                "This atlas release uses the brain parcellation resulting of the "
                "hybridation between CCFv2 and CCFv3 and integrating the splitting of "
                "layer 2 and layer 3. The average brain template and the ontology is "
                "common across CCFv2 and CCFv3."
            )

            atlasrelease_resource = Resource(
                id=forge.format("identifier", "brainatlasrelease", str(uuid4())),
                type=["AtlasRelease", "BrainAtlasRelease"],
                name="Allen Mouse CCF v2-v3 hybrid l2-l3 split",
                description=description,
                brainTemplateDataLayer=brainTemplateDataLayer,
                spatialReferenceSystem=spatialReferenceSystem,
                releaseDate=releaseDate,
                subject=subject,
            )
            if not os.path.samefile(
                new_atlasrelease_hierarchy_path,
                config_content["HierarchyJson"]["hierarchy_l23split"],
            ):
                L.error(
                    "Error: The atlas regions hierarchy file provided does not "
                    "correspond to 'hierarchy_l23split' from the dataset configuration "
                    "file"
                )
                exit(1)

            description = (
                "AIBS Mouse CCF Atlas regions hierarchy tree file including the split "
                "of layer 2 and layer 3"
            )
            # Original AIBS hierarchy file
            derivation = {
                "@type": "Derivation",
                "entity": {
                    "@id": "http://bbp.epfl.ch/neurosciencegraph/ontologies/mba",
                    "@type": ["Entity", "Ontology"],
                },
            }
            file_extension = os.path.splitext(
                os.path.basename(new_atlasrelease_hierarchy_path)
            )[1][1:]

            content_type = f"application/{file_extension}"
            distribution_file = forge.attach(
                new_atlasrelease_hierarchy_path, content_type
            )

            hierarchy_resource = Resource(
                id=forge.format("identifier", "parcellationontology", str(uuid4())),
                type=["Entity", "Ontology", "ParcellationOntology"],
                name="AIBS Mouse CCF Atlas parcellation ontology L2L3 split",
                distribution=distribution_file,
                description=description,
                derivation=derivation,
                subject=subject,
            )

            atlasrelease_resource.parcellationOntology = {
                "@id": hierarchy_resource.id,
                "@type": ["ParcellationOntology", "Ontology"],
            }
            atlasrelease_dict = {
                "atlas_release": atlasrelease_resource,
                "hierarchy": hierarchy_resource,
            }

    # Old Atlas Releases ccfv2 and ccfv3
    elif atlasrelease_choice == "atlasrelease_ccfv2v3":
        try:
            filters = {"name": "Allen Mouse CCF v2"}
            atlasreleasev2_resource = forge.search(filters, limit=1)[0]
            filters = {"name": "Allen Mouse CCF v3"}
            atlasreleasev3_resource = forge.search(filters, limit=1)[0]
            atlasrelease_dict = {
                "atlas_release": [atlasreleasev2_resource, atlasreleasev3_resource],
                "create_ccfv2v3": False,
            }
        except Exception as e:
            L.error(
                "Error when searching the BrainAtlasRelease Resources 'Allen "
                "Mouse CCF v2' and 'Allen Mouse CCF v3'in the destination "
                f"project '{forge._store.bucket}'. {e}"
            )
            exit(1)
        if not atlasreleasev2_resource or not atlasreleasev3_resource:
            L.info(
                "No BrainAtlasRelease 'Allen Mouse CCF v2' and 'Allen "
                "Mouse CCF v3' resources found in the destination project "
                f"'{forge._store.bucket}'. They will therefore be created."
            )
            description_ccfv2 = (
                "This atlas release uses the brain parcellation of CCFv2 (2011). The "
                "average brain template and the ontology is common across CCFv2 and "
                "CCFv3."
            )
            name_ccfv2 = "Allen Mouse CCF v2"
            parcellationOntology = {
                "@id": "http://bbp.epfl.ch/neurosciencegraph/ontologies/mba",
                "@type": ["Ontology", "ParcellationOntology"],
            }
            parcellationVolume = {
                "@id": "https://bbp.epfl.ch/neurosciencegraph/data/ "
                "7b4b36ad-911c-4758-8686-2bf7943e10fb",
                "@type": "BrainParcellationDataLayer",
            }

            atlasreleasev2_resource = Resource(
                id=forge.format("identifier", "brainatlasrelease", str(uuid4())),
                type=["AtlasRelease", "BrainAtlasRelease"],
                name=name_ccfv2,
                description=description_ccfv2,
                brainTemplateDataLayer=brainTemplateDataLayer,
                spatialReferenceSystem=spatialReferenceSystem,
                releaseDate=releaseDate,
                subject=subject,
                parcellationOntology=parcellationOntology,
                parcellationVolume=parcellationVolume,
            )

            atlasreleasev3_resource = Resource(
                id=forge.format("identifier", "brainatlasrelease", str(uuid4())),
                type=["AtlasRelease", "BrainAtlasRelease"],
                name=name_ccfv2.replace("v2", "v3"),
                description=description_ccfv2.replace("CCFv2 (2011)", "CCFv3 (2017)"),
                brainTemplateDataLayer=brainTemplateDataLayer,
                spatialReferenceSystem=spatialReferenceSystem,
                releaseDate=releaseDate,
                subject=subject,
                parcellationOntology=parcellationOntology,
                parcellationVolume=parcellationVolume,
            )
            atlasrelease_dict = {
                "atlas_release": [atlasreleasev2_resource, atlasreleasev3_resource],
                "create_ccfv2v3": True,
            }

    return atlasrelease_dict


def add_nrrd_props(resource, nrrd_header, config, voxel_type):
    """
    Add to the resource all the fields expected for a VolumetricDataLayer/NdRaster
    that can be found in the NRRD header. A resource dictionary must exist and be
    provided (even if empty).

    Parameters:
        resource : Resource object defined by a properties payload linked to a file.
        nrrd_header : Dict containing the input file header fields  and their
        corresponding value.
        config : Dict containing the file extension and its sampling informations.
        voxel_type : String indicating the type of voxel contained in the volumetric
                     dataset.

    Returns:
        dataset : Resource object with all Nrrd properties added.
    """

    NRRD_TYPES_TO_NUMPY = {
        "signed char": "int8",
        "int8": "int8",
        "int8_t": "int8",
        "uchar": "uint8",
        "unsigned char": "uint8",
        "uint8": "uint8",
        "uint8_t": "uint8",
        "short": "int16",
        "short int": "int16",
        "signed short": "int16",
        "signed short int": "int16",
        "int16": "int16",
        "int16_t": "int16",
        "ushort": "int16",
        "unsigned short": "uint16",
        "unsigned short int": "uint16",
        "uint16": "uint16",
        "uint16_t": "uint16",
        "int": "int32",
        "signed int": "int32",
        "int32": "int32",
        "int32_t": "int32",
        "uint": "uint32",
        "unsigned int": "uint32",
        "uint32": "uint32",
        "uint32_t": "uint32",
        "longlong": "int64",
        "long long": "int64",
        "long long int": "int64",
        "signed long long": "int64",
        "signed long long int": "int64",
        "int64": "int64",
        "int64_t": "int64",
        "ulonglong": "uint64",
        "unsigned long long": "uint64",
        "unsigned long long int": "uint64",
        "uint64": "uint64",
        "uint64_t": "uint64",
        "float": "float32",
        "double": "float64",
    }

    space_origin = None
    if "space origin" in nrrd_header:
        space_origin = nrrd_header["space origin"].tolist()
    else:
        if nrrd_header["dimension"] == 2:
            space_origin = [0.0, 0.0]
        elif nrrd_header["dimension"] == 3:
            space_origin = [0.0, 0.0, 0.0]

    space_directions = None
    if "space directions" in nrrd_header:
        # replace the nan that pynrrd adds to None (just like in NRRD spec)
        space_directions = []
        for col in nrrd_header["space directions"].tolist():
            if np.isnan(col).any():
                space_directions.append(None)
            else:
                space_directions.append(col)

    # Here, 'space directions' being missing in the file, we hardcode an identity matrix
    # If we have 4 dimensions, we say
    else:
        if nrrd_header["dimension"] == 2:
            space_directions = [[1, 0], [0, 1]]
        elif nrrd_header["dimension"] == 3:
            space_directions = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        elif nrrd_header["dimension"] == 4:
            # the following is a very lousy way to determine if among the 4 dims,
            # or the first is components or the last is time...
            if nrrd_header["sizes"][0] < (np.mean(nrrd_header["sizes"] * 0.20)):
                space_directions = [None, [1, 0, 0], [0, 1, 0], [0, 0, 1]]  # component
            else:
                space_directions = [[1, 0, 0], [0, 1, 0], [0, 0, 1], None]  # time

        elif nrrd_header["dimension"] == 5:
            space_directions = [None, [1, 0, 0], [0, 1, 0], [0, 0, 1], None]

    resource.componentEncoding = NRRD_TYPES_TO_NUMPY[nrrd_header["type"]]
    resource.endianness = nrrd_header["endian"]
    resource.bufferEncoding = nrrd_header["encoding"]
    resource.fileExtension = config["file_extension"]
    resource.dimension = []

    component_dim_index = -1
    passed_spatial_dim = False
    # for each dimension
    for i in range(0, nrrd_header["dimension"]):
        current_dim = {}
        current_dim["size"] = nrrd_header["sizes"][i].item()

        # this is a spatial dim
        if space_directions[i]:
            passed_spatial_dim = True
            current_dim["@type"] = "SpaceDimension"
            current_dim["unitCode"] = config["sampling_space_unit"]

        # this can be a component or a time dim
        else:
            # this is a time dim as it is located after space dim)
            if passed_spatial_dim:
                current_dim["@type"] = "nsg:TimeDimension"
                current_dim["samplingPeriod"] = config["sampling_period"]
                current_dim["unitCode"] = config["sampling_time_unit"]

            # this is a component dim as it is located before space dim
            else:
                # decide of the label
                component_dim_index = i
                current_dim["@type"] = "ComponentDimension"
                # current_dim["name"] = default_sample_type_multiple_components if
                # current_dim["size"] > 1 else default_sample_type_single_component
                try:
                    current_dim["name"] = get_voxel_type(current_dim["size"])
                except ValueError as e:
                    L.error(f"ValueError: {e}")
                    exit(1)
                except KeyError as e:
                    L.error(f"KeyError: {e}")
                    exit(1)

        resource.dimension.append(current_dim)

    # repeating the name of the component dimension in the "sampleType" base level prop
    if component_dim_index >= 0:
        resource.sampleType = resource.dimension.component_dim_index.name

    # As no component dim was mentioned in metadata, it means the component is of size 1
    else:
        # prepend a dimension component
        try:
            name = get_voxel_type(voxel_type, 1)
        except ValueError as e:
            L.error(f"ValueError: {e}")
            exit(1)
        component_dim = {"@type": "ComponentDimension", "size": 1, "name": name}
        resource.dimension.insert(0, component_dim)

        resource.sampleType = component_dim["name"]

    # creating the world matrix (column major)
    # 1. pynrrd creates a [nan, nan, nan] line for each 'space directions' that is
    # 'none' in the header.
    # We have to strip them off.
    worldMatrix = None
    r = []  # rotation mat
    o = space_origin
    for col in space_directions:
        if col is not None:
            r.append(col)

    # if 3D, we create a 4x4 homogeneous transformation matrix
    if len(r) == 3:
        worldMatrix = [
            r[0][0],
            r[0][1],
            r[0][2],
            0,
            r[1][0],
            r[1][1],
            r[1][2],
            0,
            r[2][0],
            r[2][1],
            r[2][2],
            0,
            o[0],
            o[1],
            o[2],
            1,
        ]

    # if 2D, we create a 3x3 homogeneous transformation matrix
    if len(r) == 2:
        worldMatrix = [r[0][0], r[0][1], 0, r[1][0], r[1][1], 0, o[0], o[1], 1]

    # nesting the matrix values into object with @value props
    for i in range(0, len(worldMatrix)):
        # worldMatrix[i] = {"@value": float(worldMatrix[i])}
        worldMatrix[i] = float(worldMatrix[i])

    resource.worldMatrix = worldMatrix

    resource.resolution = {"value": r[0][0], "unitCode": config["sampling_space_unit"]}

    return resource

"""
Create a 'VolumetricDataLayer', an 'atlasRelease' and an 'ontology' resource payload
to push into Nexus. If the resources already exist in Nexus, they will be fetched and
updated instead.
This script has been designed to function with volumetric files generated by the Atlas
pipeline.
To know more about 'VolumetricDataLayer' resources and Nexus, see
https://bluebrainnexus.io.
Link to BBP Atlas pipeline confluence documentation:
https://bbpteam.epfl.ch/project/spaces/x/rS22Ag
"""

import os
import yaml
import json
import numpy as np
import nrrd
import fnmatch
import re
from uuid import uuid4
import copy
from kgforge.core import Resource
from kgforge.specializations.stores.demo_store import DemoStore

# from kgforge.core.commons.exceptions import RetrievalError

from bba_data_push.commons import (
    get_voxel_type,
    get_brain_region_prop,
    get_hierarchy_file,
    return_contribution,
    fetch_atlasrelease,
    create_deriv_dict_id,
    return_activity_payload,
    return_file_hash,
    fetch_linked_resources,
    create_unresolved_payload,
    return_base_annotation,
    resolve_cellType,
    get_layer,
)
import bba_data_push.constants as const


def create_volumetric_resources(
    forge,
    inputpath: list,
    config_path,
    new_atlas,
    atlasrelease_config_path,
    input_hierarchy,
    input_hierarchy_jsonld,
    provenance_metadata_path,
    link_regions_path,
    resource_tag,
    logger) -> list:
    """
    Construct the input volumetric dataset, atlasrelease and hierarchy payloads that
    will be push with the corresponding files into Nexus as a resource.

    Parameters:
        forge : instantiated and configured forge object.
        inputpath : input datasets paths. These datasets are either volumetric files
                    or folder containing volumetric files.
        config_path : configuration yaml file path containing the names and paths of
                    the Atlas Annotation pipeline generated datasets.
        atlasrelease_config_path : Json file containing the atlasRelease @id as well
                    as its ontology and parcellation volume @id. It needs to contains
                    at least these informations for the atlasRelease Allen Mouse CCFV2
                    and CCFV3 stocked in the Nexus project bbp/atlas.
        input_hierarchy : hierarchy json files.
        input_hierarchy_jsonld : hierarchy jsonld file to be attached to the
                    atlasrelease ontology.
        provenance_metadata_path : configuration json file containing various
                    information about dataset provenance generated from the Atlas
                    Annotation Pipeline run.
        link_regions_path : Json file meant to contain the @ids of the brain regions
                    masks, meshes and region summaries.
        resource_tag : Tag value (string).
        logger : logger.
    Returns:
        resources_payloads : dict of the form containing the Resource objects
                (volumetricdatalayer, atlasrelease, hierarchy, activity) that has been
                constructed and need to be updated/pushed in Nexus.
    """

    def freeze(d):
        if isinstance(d, dict):
            return frozenset((key, freeze(value)) for key, value in d.items())
        elif isinstance(d, list):
            return tuple(freeze(value) for value in d)
        return d

    config_file = open(config_path)
    config_content = yaml.safe_load(config_file.read().strip())
    config_file.close()
    try:
        volumes = config_content["GeneratedDatasetPath"]["VolumetricFile"]
        hierarchies = config_content["HierarchyJson"]
    except KeyError as error:
        logger.error(f"KeyError: {error} is not found in the dataset configuration file.")
        exit(1)

    if provenance_metadata_path:
        try:
            with open(provenance_metadata_path, "r") as f:
                provenance_metadata = json.loads(f.read())
        except ValueError as error:
            logger.error(f"{error} : {provenance_metadata_path}.")
            exit(1)

        deriv_dict_id = create_deriv_dict_id(
            forge, logger, inputpath, provenance_metadata, volumes, hierarchies
        )
    else:
        provenance_metadata = None
        deriv_dict_id = {}
    print("\nprovenance_metadata: ", provenance_metadata)

    # Dict containing all the pipeline generated volumetric datasets and their
    # informations
    try:
        volumetric_dict = const.return_volumetric_dict(volumes)
    except KeyError as error:
        logger.error(f"{error}")
        exit(1)

    # Create contribution
    if isinstance(forge._store, DemoStore):
        contribution = []
    else:
        try:
            contribution, log_info = return_contribution(forge)
            logger.info("\n".join(log_info))
        except Exception as e:
            logger.error(f"{e}")
            exit(1)

    deriv_celldensities_template = {
        "@type": "Derivation",
        "entity": {
            "@id": "",
            "@type": "Dataset",
        },
    }

    # Constants

    resources_payloads = {
        "activity": [],
        "tag": "",
    }
    actions = ["toUpdate","toPush"]
    dataset_structure = {
        f"{const.schema_volumetricdatalayer}": [],
        f"{const.schema_atlasrelease}": [],
        f"{const.schema_ontology}": [],
        f"{const.schema_spatialref}": [],
    }
    for action in actions:
        resources_payloads.update({"datasets_"+action: copy.deepcopy(dataset_structure)})


    atlasrelease_payloads = {
        "atlasrelease_choice": None,
        "atlas_release": {},
        #"atlas_release": copy.deepcopy(const.atlasrelease_dict),
        "hierarchy": None,
        "parcellation": None,
        "tag": None,
        "fetched": False,
        "aibs_atlasrelease": False,
    }
    atlasRelease = {}
    dict_ids = {}
    generation = {}
    activity_resource = []
    atlasrelease_parcellation = None

    region_id = 997  # default: 997 --> root, whole brain
    region_name = "root"
    brainLocation_def = {
        "brainRegion": {"@id": f"mba:{region_id}", "label": f"{region_name}"},
        "atlasSpatialReferenceSystem": {
            "@type": ["BrainAtlasSpatialReferenceSystem", "AtlasSpatialReferenceSystem"],
            "@id": const.atlas_spatial_reference_system_id}
    }

    for filepath in inputpath:
        print("\n", filepath)
        fileFound = False
        isFolder = False
        resource_flag = ""
        derivation = False
        derivationDataFound = False
        dimension_name = False
        flat_tree = {}
        action_summary_file = False
        link_summary_content = {}
        differentAtlasrelease = False
        dataset_name = None
        distribution_file = None
        fetched_resources = None
        toUpdate = False
        fetched_resource_id = None
        fetched_resource_metadata = None
        parcellationAtlas_id = None
        brainLocation = copy.deepcopy(brainLocation_def)

        if not fileFound:
            # ============================== CELL DENSITIES ==============================
            # OUTDATED. Oldschool messy derivation links. The goal was to add to the
            # volumetric cell density file payload the derivation to the cell density
            # dataset that is the folder containing the cell density volumetric files
            for dataset in volumetric_dict["cell_densities"]:
                try:
                    if os.path.samefile(filepath, dataset):
                        fileFound = True
                        resource_flag = "isCellDensity"
                        dataset_dict = volumetric_dict["cell_densities"][dataset]
                        print("\n", dataset_dict)
                        if os.path.isdir(filepath):
                            isFolder = True
                            directory = filepath
                            files = os.listdir(directory)
                            pattern = "*_densit*.nrrd"
                            files_list = fnmatch.filter(files, pattern)
                            files_list_path = [os.path.join(directory, f) for f in files_list]
                            for f in files: # TODO: define a recursive function instead
                                subdir = os.path.join(directory, f)
                                if os.path.isdir(subdir):
                                    files_list_sub = fnmatch.filter(os.listdir(subdir), pattern)
                                    files_list_path.extend(os.path.join(subdir, f) for f in files_list_sub)
                                    files_list.extend(files_list_sub)
                            if not files_list:
                                logger.error(
                                    f"Error: '{filepath}' do not contain any cell density "
                                    "volumetric files."
                                )
                                exit(1)
                            # this is going ot be the "name" of the first resource
                            filepath = files_list_path[0]
                            filename_noext = os.path.splitext(os.path.basename(filepath))[0]
                            file_extension = os.path.splitext(os.path.basename(filepath))[
                                1
                            ][1:]
                            file_split = filename_noext.split("_")
                            v = "mtypes_densities_probability_map_ccfv2_correctednissl"
                            try:
                                if os.path.samefile(
                                    directory,
                                    volumes[
                                        "mtypes_densities_profile_ccfv2_correctednissl"
                                    ],
                                ) or os.path.samefile(
                                    directory,
                                    volumes[v],
                                ):
                                    file_split.insert(0, "Mtype")
                            except FileNotFoundError:
                                pass
                            atlasrelease_choice = dataset_dict["atlasrelease"]
                            if atlasrelease_choice == "atlasrelease_ccfv2":
                                filename_noext = f"{filename_noext} Ccfv2 Corrected Nissl"
                            description = (
                                f"{filename_noext} volume for the {dataset_dict['description']}.")
                            voxel_type = dataset_dict["voxel_type"]
                            resource_types = dataset_dict["type"]

                            if dataset_dict["derivation"]:
                                if not isinstance(
                                    dataset_dict["derivation"],
                                    dict,
                                ):
                                    if isinstance(
                                        dataset_dict["derivation"],
                                        tuple,
                                    ):
                                        data_deriv = dataset_dict["derivation"][0]
                                        subdata_deriv = dataset_dict["derivation"][1]
                                        fulldata_deriv = f"{data_deriv}/{subdata_deriv}"
                                    else:
                                        data_deriv = dataset_dict["derivation"]
                                    # Search for the file to derive from in the input files
                                    # and if it is already a resource or not
                                    for inputdata in inputpath:
                                        try:
                                            if os.path.samefile(data_deriv, inputdata):
                                                derivationDataFound = True
                                                for r in range(0, len(resources_payloads["datasets"])):
                                                    distrib = resources_payloads["datasets"][r].distribution.args[0]
                                                    if isinstance(dataset_dict["derivation"], tuple):
                                                        data_deriv = fulldata_deriv
                                                    # check if a previous resource is the one
                                                    # from which it derives
                                                    if os.path.samefile(data_deriv, distrib):
                                                        # Check if the previous resource has
                                                        # an id already
                                                        try:
                                                            if resources_payloads["datasets"][r].id:
                                                                pass
                                                        except AttributeError:
                                                            dataset_id = forge.format("identifier", "volumetricdatalayer", str(uuid4()))
                                                            resources_payloads["datasets"][r].id = f"{dataset_id}"
                                                        derivation = copy.deepcopy(deriv_celldensities_template)
                                                        derivation["entity"]["@id"] = f"{dataset_id}"
                                                        break
                                                # if the parent resource has not been created
                                                # yet
                                                if not derivation:
                                                    dict_ids[f"{data_deriv}"] = forge.format("identifier", "volumetricdatalayer", str(uuid4()))
                                                    derivation = copy.deepcopy(deriv_celldensities_template)
                                                    derivation["entity"]["@id"] = dict_ids[f"{data_deriv}"]
                                        except FileNotFoundError:
                                            print("data_deriv '%s' not found for filepath %s" % (data_deriv, filepath))
                                            pass
                                    if not derivationDataFound:
                                        logger.info(
                                            f"The file '{data_deriv}' whose "
                                            "resource corresponding to the file "
                                            f"'{dataset}' derivates is absent from the "
                                            "input dataset. The property 'derivation' "
                                            "from the latter resource will be thus left "
                                            "empty."
                                        )
                                else:
                                    derivation = dataset_dict["derivation"]
                            dataset_name = dataset_dict["name"]
                            dataSampleModality = dataset_dict["datasamplemodality"]
                            break
                        else:
                            if filepath.endswith(".nrrd"):
                                fileFound = True
                                # this is going ot be the "name" of the resource
                                filename_noext = os.path.splitext(
                                    os.path.basename(filepath)
                                )[0]
                                file_extension = os.path.splitext(
                                    os.path.basename(filepath)
                                )[1][1:]
                                file_split = filename_noext.split("_")[:3]
                                atlasrelease_choice = dataset_dict["atlasrelease"]
                                if atlasrelease_choice == "atlasrelease_ccfv2":
                                    filename_noext = (
                                        f"{filename_noext} Ccfv2 Corrected Nissl"
                                    )
                                description = (f"{filename_noext} volume for the {dataset_dict['description']}.")
                                voxel_type = dataset_dict["voxel_type"]
                                resource_types = dataset_dict["type"]
                                # Derivation
                                if dataset_dict["derivation"]:
                                    if not isinstance(
                                        dataset_dict["derivation"],
                                        dict,
                                    ):

                                        # Search for the file to derive from in the input
                                        # files and if it is already a resource or not
                                        if isinstance(
                                            dataset_dict["derivation"],
                                            tuple,
                                        ):
                                            data_deriv = dataset_dict["derivation"][0]
                                            subdata_deriv = dataset_dict["derivation"][1]
                                            fulldata_deriv = f"{data_deriv}/{subdata_deriv}"
                                        else:
                                            data_deriv = dataset_dict["derivation"]
                                        for inputdata in inputpath:
                                            if os.path.samefile(
                                                data_deriv,
                                                inputdata,
                                            ):
                                                derivationDataFound = True
                                                for r in range(
                                                    0, len(resources_payloads["datasets"])
                                                ):
                                                    distrib = resources_payloads[
                                                        "datasets"
                                                    ][r].distribution.args[0]
                                                    if isinstance(
                                                        dataset_dict["derivation"],
                                                        tuple,
                                                    ):
                                                        data_deriv = fulldata_deriv
                                                    if os.path.samefile(
                                                        data_deriv, distrib
                                                    ):
                                                        try:
                                                            if resources_payloads[
                                                                "datasets"
                                                            ][r].id:
                                                                pass
                                                        except AttributeError:
                                                            resources_payloads["datasets"][
                                                                r
                                                            ].id = forge.format(
                                                                "identifier",
                                                                "volumetricdatalayer",
                                                                str(uuid4()),
                                                            )
                                                        derivation = copy.deepcopy(
                                                            deriv_celldensities_template
                                                        )
                                                        derivation["entity"][
                                                            "@id"
                                                        ] = resources_payloads["datasets"][
                                                            r
                                                        ].id
                                                        break
                                                if not derivation:
                                                    dict_ids[
                                                        f"{data_deriv}"
                                                    ] = forge.format(
                                                        "identifier",
                                                        "volumetricdatalayer",
                                                        str(uuid4()),
                                                    )
                                                    derivation = copy.deepcopy(
                                                        deriv_celldensities_template
                                                    )
                                                    derivation["entity"]["@id"] = dict_ids[
                                                        f"{data_deriv}"
                                                    ]
                                        if not derivationDataFound:
                                            logger.info(
                                                f"The file '{data_deriv}' whose "
                                                "resource corresponding to the file "
                                                f"'{dataset}' derivates is absent from the "
                                                "input dataset. The property 'derivation' "
                                                "from the latter resource will be thus "
                                                "left empty."
                                            )
                                    else:
                                        derivation = dataset_dict["derivation"]
                                dataset_name = dataset_dict["name"]
                                dataSampleModality = dataset_dict["datasamplemodality"]
                                break
                            else:
                                logger.error(
                                    f"Error: parcellation dataset '{filepath}' is not a "
                                    "volumetric .nrrd file"
                                )
                                exit(1)
                except FileNotFoundError:
                    pass

        # ============================== PARCELLATIONS ==============================
        if not fileFound:
            for dataset in volumetric_dict["parcellations"]:
                try:
                    if os.path.samefile(filepath, dataset):
                        if filepath.endswith(".nrrd"):
                            fileFound = True
                            dataset_dict = volumetric_dict["parcellations"][dataset]
                            resource_types = dataset_dict["type"]
                            voxel_type = dataset_dict["voxel_type"]
                            description = f"{dataset_dict['description']}"
                            atlasrelease_choice = dataset_dict["atlasrelease"]
                            dataSampleModality = dataset_dict["datasamplemodality"]
                            dataset_name = dataset_dict["name"]
                            # this is going ot be the "name" of the resource
                            filename_noext = os.path.splitext(
                                os.path.basename(filepath)
                            )[0]
                            file_extension = os.path.splitext(
                                os.path.basename(filepath)
                            )[1][1:]
                            break
                        else:
                            logger.error(
                                f"Error: parcellation dataset '{filepath}' is not a "
                                "volumetric .nrrd file"
                            )
                            exit(1)
                except FileNotFoundError:
                    pass
        # ============================== HEMISPHERES ==============================
        if not fileFound:
            for dataset in volumetric_dict["hemispheres"]:
                try:
                    if os.path.samefile(filepath, dataset):
                        if filepath.endswith(".nrrd"):
                            fileFound = True
                            dataset_dict = volumetric_dict["hemispheres"][dataset]
                            resource_types = dataset_dict["type"]
                            voxel_type = dataset_dict["voxel_type"]
                            description = f"{dataset_dict['description']}"
                            atlasrelease_choice = dataset_dict["atlasrelease"]
                            dataSampleModality = dataset_dict["datasamplemodality"]
                            dataset_name = dataset_dict["name"]
                            # this is going ot be the "name" of the resource
                            filename_noext = os.path.splitext(
                                os.path.basename(filepath)
                            )[0]
                            file_extension = os.path.splitext(
                                os.path.basename(filepath)
                            )[1][1:]
                            break
                        else:
                            logger.error(
                                f"Error: hemispheres dataset '{filepath}' is not a "
                                "volumetric .nrrd file"
                            )
                            exit(1)
                except FileNotFoundError:
                    pass
        # ============================== BrainTemplate ==============================
        if not fileFound:
            for dataset in volumetric_dict["brain_template"]:
                try:
                    if os.path.samefile(filepath, dataset):
                        if filepath.endswith(".nrrd"):
                            fileFound = True
                            dataset_dict = volumetric_dict["brain_template"][dataset]
                            resource_types = dataset_dict["type"]
                            voxel_type = dataset_dict["voxel_type"]
                            description = f"{dataset_dict['description']}"
                            atlasrelease_choice = dataset_dict["atlasrelease"]
                            dataSampleModality = dataset_dict["datasamplemodality"]
                            voxel_type = dataset_dict["voxel_type"]
                            dataset_name = dataset_dict["name"]
                            # this is going ot be the "name" of the resource
                            filename_noext = os.path.splitext(
                                os.path.basename(filepath)
                            )[0]
                            file_extension = os.path.splitext(
                                os.path.basename(filepath)
                            )[1][1:]
                            break
                        else:
                            logger.error(
                                f"Error: braintemplate dataset '{filepath}' is not a "
                                "volumetric .nrrd file"
                            )
                            exit(1)
                except FileNotFoundError:
                    pass
        # ============================ CELL ORIENTATIONS ============================
        if not fileFound:
            for dataset in volumetric_dict["cell_orientations"]:
                try:
                    if os.path.samefile(filepath, dataset):
                        if filepath.endswith(".nrrd"):
                            fileFound = True
                            dataset_dict = volumetric_dict["cell_orientations"][dataset]
                            resource_types = dataset_dict["type"]
                            voxel_type = dataset_dict["voxel_type"]
                            description = f"{dataset_dict['description']}"
                            atlasrelease_choice = dataset_dict["atlasrelease"]
                            dataSampleModality = dataset_dict["datasamplemodality"]
                            dataset_name = dataset_dict["name"]
                            if dataSampleModality == "quaternion":
                                dimension_name = "quaternion"
                            # this is going ot be the "name" of the resource
                            filename_noext = os.path.splitext(
                                os.path.basename(filepath)
                            )[0]
                            file_extension = os.path.splitext(
                                os.path.basename(filepath)
                            )[1][1:]
                            break
                        else:
                            logger.error(
                                f"Error: parcellation dataset '{filepath}' is not a "
                                "volumetric .nrrd file"
                            )
                            exit(1)
                except FileNotFoundError:
                    pass

        # ============================== PLACEMENT HINTS ==============================
        if not fileFound:
            for dataset in volumetric_dict["placement_hints"]:
                try:
                    if os.path.samefile(filepath, dataset):
                        fileFound = True
                        resource_flag = "isPH"
                        if os.path.isdir(filepath):
                            isFolder = True
                            directory = filepath
                            files = os.listdir(directory)
                            pattern = "*layer*"
                            files_list = fnmatch.filter(files, pattern)
                            files_list = sorted(files_list)
                            if len(files_list) != 6:
                                logger.error(
                                    f"Error: '{filepath}' do not contain 6 placement "
                                    "hints volumetric files."
                                )
                                exit(1)
                            pattern = "*y.nrrd"
                            ylayer = fnmatch.filter(files, pattern)
                            if not ylayer:
                                logger.error(
                                    f"Error: '{filepath}' do not contain the file "
                                    "[PH]y.nrrd volumetric files."
                                )
                                exit(1)
                            pattern = "*problematic_voxel_mask.nrrd"
                            mask_error = fnmatch.filter(files, pattern)
                            if not mask_error:
                                logger.error(
                                    f"Error: '{filepath}' do not contain the "
                                    "problematic_voxel_mask file."
                                )
                                exit(1)
                            pattern = "*report.json"
                            report_error = fnmatch.filter(files, pattern)
                            if not report_error:
                                logger.error(
                                    f"Error: '{filepath}' do not contain the report "
                                    "json file"
                                )
                                exit(1)
                            files_list.extend(ylayer)
                            files_list.extend(mask_error)
                            files_list.extend(report_error)
                            # this is going ot be the "name" of the resource
                            filepath = os.path.join(directory, files_list[0])
                            filename_noext = os.path.splitext(
                                os.path.basename(filepath)
                            )[0]
                            file_extension = os.path.splitext(
                                os.path.basename(filepath)
                            )[1][1:]
                            dataset_dict = volumetric_dict["placement_hints"][dataset]
                            resource_types = dataset_dict["type"]
                            voxel_type = dataset_dict["voxel_type"]
                            layer_number = re.findall(
                                r"\d+", filename_noext.replace("_", " ").title()
                            )
                            description = dataset_dict["description"]
                            description = description.replace("XX", layer_number[0])
                            for layer_nbr, layer_id in const.isocortex_layers.items():
                                if layer_nbr == layer_number[0]:
                                    layer = {
                                        "@id": layer_id,
                                        "label": f"layer {layer_nbr}",
                                    }
                                    brainLocation["layer"] = layer
                                    pass
                            atlasrelease_choice = dataset_dict["atlasrelease"]
                            dataSampleModality = dataset_dict["datasamplemodality"]
                            dataset_name = dataset_dict["name"]
                            suffixe = dataset_dict["suffixe"]
                            annotation_description = const.description_ccfv3_split
                            break
                        else:
                            logger.error(
                                f"Error: placement hints dataset '{filepath}' is not a "
                                "folder containing placement hints volume and error "
                                "reports."
                            )
                            exit(1)

                except FileNotFoundError:
                    pass

        # =============================== Region MASKS ===============================
        if not fileFound:
            for dataset in volumetric_dict["volume_mask"]:
                try:
                    if os.path.samefile(filepath, dataset):
                        resource_flag = "isRegionMask"
                        fileFound = True
                        if os.path.isdir(filepath):
                            isFolder = True
                            directory = filepath
                            files = os.listdir(directory)
                            pattern = "*.nrrd"
                            files_list = fnmatch.filter(files, pattern)
                            if not files_list:
                                logger.error(
                                    f"Error: '{filepath}' do not contain any mask "
                                    "volumetric files."
                                )
                                exit(1)
                            # this is going ot be the "name" of the resource
                            filepath = os.path.join(directory, files_list[0])
                            filename_noext = os.path.splitext(
                                os.path.basename(filepath)
                            )[0]
                            file_extension = os.path.splitext(
                                os.path.basename(filepath)
                            )[1][1:]
                            dataset_dict = volumetric_dict["volume_mask"][dataset]
                            resource_types = dataset_dict["type"]
                            try:
                                region_id = int(filename_noext)
                            except ValueError as error:
                                logger.error(
                                    f"ValueError in '{filepath}' file name. {error}. "
                                    "The mask file names have to be integer "
                                    "representing their region"
                                )
                                exit(1)
                            voxel_type = dataset_dict["voxel_type"]
                            try:
                                hierarchy_path = get_hierarchy_file(
                                    input_hierarchy,
                                    config_content,
                                    dataset_dict["hierarchy_tag"],
                                )
                                region_name, hierarchy_tree = get_brain_region_prop(
                                    region_id, ["name"], hierarchy_path, flat_tree
                                )
                                region_name = region_name["name"]
                                flat_tree = hierarchy_tree
                            except KeyError as e:
                                logger.error(f"KeyError: {e}")
                                exit(1)
                            except ValueError as e:
                                logger.error(f"ValueError: {e}")
                                exit(1)
                            logger.info(
                                f"Creating the Mask payload for region {region_id}..."
                            )
                            description = (
                                f"Binary mask volume - {region_name.title()} (ID: "
                                f"{region_id}) - for the "
                                f"{dataset_dict['description']}."
                            )
                            brainLocation["brainRegion"]["@id"] = f"mba:{region_id}"
                            brainLocation["brainRegion"]["label"] = f"{region_name}"
                            atlasrelease_choice = dataset_dict["atlasrelease"]
                            dataSampleModality = dataset_dict["datasamplemodality"]
                            dataset_name = dataset_dict["name"]
                            # this is going ot be the "name" of the resource
                            suffixe = dataset_dict["suffixe"]
                            filename_noext = os.path.splitext(
                                os.path.basename(filepath)
                            )[0]
                            file_extension = os.path.splitext(
                                os.path.basename(filepath)
                            )[1][1:]
                            filename_noext = f"{region_name.title()} Mask {suffixe}"
                            if link_regions_path:
                                try:
                                    with open(
                                        link_regions_path, "r+"
                                    ) as link_summary_file:
                                        link_summary_file = open(
                                            link_regions_path, "r+"
                                        )
                                        link_summary_file.seek(0)
                                        link_summary_content = json.loads(
                                            link_summary_file.read()
                                        )
                                    action_summary_file = "append"
                                except json.decoder.JSONDecodeError:
                                    action_summary_file = "write"
                                except FileNotFoundError:
                                    action_summary_file = "write"
                            break

                        else:
                            logger.error(
                                f"Error: volumetric mask dataset '{filepath}' is not a "
                                "folder containing binary mask volume."
                            )
                            exit(1)

                except FileNotFoundError:
                    pass

        # If still no file found at this step then raise error
        if not fileFound:
            logger.error(
                f"Error: '{filepath}' does not correspond to one of the datasets "
                "defined in the VolumetricFile section of the 'generated dataset' "
                "configuration file"
            )
            exit(1)

        # Parsing the header of the NRRD file
        header = None
        try:
            header = nrrd.read_header(filepath)
        except nrrd.errors.NRRDError as e:
            logger.error(f"NrrdError: {e}")
            logger.info("Aborting pushing process.")
            exit(1)

        config = copy.deepcopy(const.config)
        config["file_extension"] = file_extension
        # ==== Create/fetch the atlasRelease Resource linked to the input datasets ====
        print("\natlasrelease_choice from dataset_dict: %s" % atlasrelease_choice)
        atlasrelease_config = None
        try:
            with open(atlasrelease_config_path, "r") as atlasrelease_config_file:
                atlasrelease_config_file.seek(0)
                atlasrelease_config = json.load(atlasrelease_config_file)
        except json.decoder.JSONDecodeError as error:
            raise json.decoder.JSONDecodeError(
                f"JSONDecodeError when opening the file '{atlasrelease_config_path}':\n{error}")
        except FileNotFoundError:
            atlasrelease_config = {}
        atlasrelease_choice = list(atlasrelease_config.keys())[0]

        atlasrelease_payloads = fetch_atlasrelease(forge, logger, atlasrelease_config_path, new_atlas, input_hierarchy, input_hierarchy_jsonld, config_content, inputpath, provenance_metadata, contribution, resource_tag, differentAtlasrelease, atlasrelease_payloads, resources_payloads)
        atlasRelease = atlasrelease_payloads["atlasRelease"]

        # => check if the good parcellation file is given in input right now
        # but link it to the atlasRelease resource later during the dataset
        # payload creation loop
        atlasrelease_parcellation = os.path.splitext(atlasrelease_payloads["parcellation"].distribution.name)[0]
        for datasetpath in inputpath:
            try:
                if os.path.samefile(datasetpath, volumes[atlasrelease_parcellation]):
                    continue
            except FileNotFoundError:
                if getattr(atlasrelease_payloads["atlas_release"], "parcellationVolume", None):
                    logger.error(
                        "Error: the parcellation file corresponding to "
                        "the created atlasRelease resource can not be "
                        "found among input dataset files"
                    )
                    exit(1)

        # =================== Derivation Hierarchy file ===================
        # Check if a dataset derive from the hierarchy file
        hierarchy_name = hierarchies["hierarchy_l23split"]
        if hierarchy_name in deriv_dict_id.keys():
            atlasrelease_payloads["hierarchy"].id = deriv_dict_id[
                hierarchy_name
            ]["id"]

        hierarchy_deriv = []
        for deriv_key, deriv_value in deriv_dict_id.items():
            if hierarchy_name in deriv_value["datasets"]:
                deriv_type = []
                for volumetric_type, content in volumetric_dict.items():
                    try:
                        deriv_type = content[f"{volumes[deriv_key]}"][0]
                        if deriv_type not in resource_types:
                            deriv_type = ["Dataset", deriv_type]
                        else:
                            deriv_type = "Dataset"
                    except KeyError:
                        pass
                # if the derivation is not a known volumetric dataset then
                # it is an ontology
                if not deriv_type:
                    deriv_type = ["Entity", const.ontology_type]
                deriv = {
                    "@type": "Derivation",
                    "entity": {
                        "@id": deriv_value["id"],
                        "@type": deriv_type,
                    },
                }
                hierarchy_deriv.append(deriv)
        # If only 1 item no need for it to be a list
        if len(hierarchy_deriv) == 1:
            hierarchy_deriv = hierarchy_deriv[0]

        print("differentAtlasrelease:", differentAtlasrelease)
        # ==================== Fetch atlasRelease linked resources ====================
        # get the parcellation ID to fetch
        if (
            not isinstance(forge._store, DemoStore)
            and not atlasrelease_payloads["aibs_atlasrelease"]
        ):
            try:
                if os.path.samefile(volumes[atlasrelease_parcellation], filepath):
                    resource_flag = "isAtlasParcellation"
                    if atlasrelease_payloads["fetched"]:
                        try:
                            parcellationAtlas_id = atlasrelease_payloads["atlas_release"].parcellationVolume["@id"]
                        except AttributeError:
                            pass
            except FileNotFoundError:
                pass
            except KeyError:
                pass

        if (
            atlasrelease_payloads["fetched"]
            or atlasrelease_payloads["aibs_atlasrelease"]
        ):
            print("resource_types:", resource_types)
            resource_type_list = [x for x in resource_types if x not in set([const.dataset_type, const.volumetric_type])]
            datasamplemodality_list = [dataSampleModality]
            if resource_flag == "isPH":
                resource_type_list_2 = list(
                    set(
                        volumetric_dict["placement_hints"][dataset]["type_2"]
                    ).difference(set([const.dataset_type, const.volumetric_type]))
                )
                resource_type_list = [
                    resource_type_list[0],
                    resource_type_list_2[0],
                ]
                datasamplemodality_list = [
                    dataSampleModality,
                    volumetric_dict["placement_hints"][dataset]["datasamplemodality_2"],
                ]
            try:
                # fetched_resources will be either one resource or a dictionary of
                # resource
                fetched_resources = fetch_linked_resources(
                    forge,
                    atlasRelease,
                    resource_type_list,
                    datasamplemodality_list,
                    resource_flag,
                    parcellationAtlas_id=parcellationAtlas_id,
                )
            except KeyError as error:
                logger.error(f"{error}")
                exit(1)
            except IndexError as error:
                logger.error(f"{error}")
                exit(1)
        else:

            # ======================= Create the derivation prop =======================

            if resource_flag != "isCellDensity":
                derivation = []
                for deriv_key, deriv_value in deriv_dict_id.items():
                    if dataset_name in deriv_value["datasets"]:
                        deriv_type = []
                        # the type is given for the derivation that are
                        # 'input_dataset_used'
                        try:
                            if deriv_value["type"] == "ParcellationOntology":
                                deriv_type = ["Entity", deriv_value["type"]]
                            else:
                                deriv_type = "Dataset"
                        except KeyError:
                            pass
                        if not deriv_type:
                            for volumetric_type, content in volumetric_dict.items():
                                try:
                                    deriv_type = content[f"{volumes[deriv_key]}"][0]
                                    # In order to avoir RegistrationError due to
                                    # derivation having a type constrained by the
                                    # volumetricdatalayer schema :
                                    deriv_type = "Dataset"
                                except KeyError:
                                    pass
                        # if the derivation is not a known volumetric dataset then
                        # it is an ontology
                        if not deriv_type:
                            deriv_type = ["Entity", const.ontology_type]
                        deriv = {
                            "@type": "Derivation",
                            "entity": {
                                "@id": deriv_value["id"],
                                "@type": deriv_type,
                            },
                        }
                        derivation.append(deriv)
                # If only 1 item no need for it to be a list
                if len(derivation) == 1:
                    derivation = derivation[0]

        # ==================== add Activity and generation prop ====================
        if provenance_metadata and not activity_resource:
            try:
                activity_resource = return_activity_payload(forge, provenance_metadata)
                if not activity_resource._store_metadata:
                    logger.info(
                        "Existing activity resource not found in the Nexus destination "
                        f"project '{forge._store.bucket}'. A new activity will be "
                        "created and registered"
                    )
            except Exception as e:
                logger.error(f"{e}")
                exit(1)

            generation = {
                "@type": "Generation",
                "activity": {
                    "@id": activity_resource.id,
                    "@type": activity_resource.type,
                },
            }

        nrrd_resources = {"toUpdate": [], "toPush": []}

        # =========================== 1st Payload creation ===========================

        # We create a 1st payload that will be recycled in case of multiple files to
        # push
        print("\nName of the first resource: '%s'" % filename_noext)

        # If the resource has been fetched, we compare its distribution to the input
        # file, copy its id and _store_metadata
        if fetched_resources:
            filepath_hash = return_file_hash(filepath)
            # If the fetched resources are a dict full of resource per regions
            first_fetched_resource = None
            #print("\nfetched_resources:", fetched_resources)
            if isinstance(fetched_resources, dict):
                if resource_flag == "isRegionMask":
                    try:
                        first_fetched_resource = fetched_resources[f"{region_id}"]
                    # If the region in particular is not found then do not update this
                    # one and create it instead
                    except KeyError:
                        content_type = f"application/{file_extension}"
                        distribution_file = forge.attach(filepath, content_type)
                        pass
                if resource_flag == "isPH":
                    try:
                        first_fetched_resource = fetched_resources[f"{layer_number[0]}"]
                    # If the region in particular is not found then do not update this
                    # one and create it instead
                    except KeyError:
                        content_type = f"application/{file_extension}"
                        distribution_file = forge.attach(filepath, content_type)
                        pass
            else:
                for res in (fetched_resources if isinstance(fetched_resources, list) else [fetched_resources]):
                    basename = os.path.basename(filepath).casefold()
                    #print("res, base:", res.distribution.name.casefold(), basename)
                    if res.distribution.name.casefold() in [basename, basename.replace("density","densities"), basename.replace("densities","density")]:
                        first_fetched_resource = res

            if first_fetched_resource:
                toUpdate = True
                fetched_resource_id = first_fetched_resource.id
                fetched_resource_metadata = first_fetched_resource._store_metadata
                try:
                    if (
                        filepath_hash
                        != first_fetched_resource.distribution.digest.value
                    ):
                        content_type = f"application/{file_extension}"
                        distribution_file = forge.attach(filepath, content_type)
                    else:
                        print(f"The distribution hash of the fetched '{first_fetched_resource.name}' corresponds to the hash of the input '{filepath}', nothing to update.")
                        continue # TODO check whether the rest of the resources other than the first will be checked
                # If no distribution in the fetched resources then attach the input file
                except AttributeError:
                    content_type = f"application/{file_extension}"
                    distribution_file = forge.attach(filepath, content_type)
            else:
                content_type = f"application/{file_extension}"
                distribution_file = forge.attach(filepath, content_type)
        else:
            content_type = f"application/{file_extension}"
            distribution_file = forge.attach(filepath, content_type)

        nrrd_resource = Resource(
            type = resource_types,
            name = filename_noext,
            distribution = distribution_file,
            description = description,
            isRegisteredIn = const.isRegisteredIn,
            brainLocation = brainLocation,
            atlasRelease = atlasRelease,
            dataSampleModality = dataSampleModality,
            subject = const.subject,
            contribution = contribution,
        )

        if resource_flag == "isCellDensity":
            nrrd_resource.annotation = get_cellAnnotation(forge, filename_noext)
            nrrd_resource.cellType = get_cellType(forge, filename_noext)
            nrrd_resource.brainLocation["layer"] = get_layer(forge, nrrd_resource.cellType[0]["label"])

        nrrd_resource = add_nrrd_props(nrrd_resource, header, config, voxel_type)

        if derivation:
            nrrd_resource.derivation = derivation

        if fetched_resource_id:
            nrrd_resource.id = fetched_resource_id
        elif dataset in dict_ids:
            nrrd_resource.id = dict_ids[dataset]
        elif dataset_name in deriv_dict_id.keys():
            nrrd_resource.id = deriv_dict_id[dataset_name]["id"]
        else:
            print("No nrrd_resource.id set for", filename_noext)

        if dimension_name:
            nrrd_resource.dimension[0]["name"] = dimension_name

        if generation:
            nrrd_resource.generation = generation

        if resource_flag == "isPH":
            nrrd_resource.name = f"{nrrd_resource.name} {suffixe}"

        print("\nfetched_resource_metadata:", fetched_resource_metadata)
        if fetched_resource_metadata:
            nrrd_resource._store_metadata = fetched_resource_metadata

        if action_summary_file:
            if hasattr(nrrd_resource, "id"):
                mask_id = nrrd_resource.id
            else:
                mask_id = forge.format(
                    "identifier", "volumetricdatalayer", str(uuid4())
                )
                nrrd_resource.id = mask_id
            mask_link = {"mask": {"@id": mask_id}}
            if action_summary_file == "append":
                try:
                    if "mask" not in link_summary_content[f"{region_id}"].keys():
                        link_summary_content[f"{region_id}"].update(mask_link)
                    else:
                        link_summary_content[f"{region_id}"] = mask_link
                except KeyError:
                    link_summary_content[f"{region_id}"] = mask_link
            else:
                region_summary = {
                    f"{region_id}": {
                        "mask": {"@id": mask_id},
                    }
                }
                link_summary_content.update(region_summary)

        # ====================== Link atlasRelease/Parcellation ======================
        if (
            resource_flag == "isAtlasParcellation"
            and not atlasrelease_payloads["aibs_atlasrelease"]
        ):
            if not atlasrelease_payloads["atlas_release"][
                atlasrelease_choice
            ].parcellationVolume:
                if not hasattr(nrrd_resource, "id"):
                    nrrd_resource.id = forge.format(
                        "identifier", "volumetricdatalayer", str(uuid4())
                    )
                atlasrelease_payloads["atlas_release"][
                    atlasrelease_choice
                ].parcellationVolume = {
                    "@id": nrrd_resource.id,
                    "@type": ["Dataset", "BrainParcellationDataLayer"],
                }
            atlasrelease_payloads["atlas_release"][
                atlasrelease_choice
            ].contribution = contribution

        # ====================== Link atlasRelease/Hemispheres ======================
        if (
            resource_flag == "isAtlasHemispheres"
            and not atlasrelease_payloads["aibs_atlasrelease"]
        ):
            if not atlasrelease_payloads["atlas_release"][
                atlasrelease_choice
            ].hemisphereVolume:
                if not hasattr(nrrd_resource, "id"):
                    nrrd_resource.id = forge.format(
                        "identifier", "volumetricdatalayer", str(uuid4())
                    )
                atlasrelease_payloads["atlas_release"][
                    atlasrelease_choice
                ].hemisphereVolume = {
                    "@id": nrrd_resource.id,
                    "@type": ["Dataset", "HemisphereAnnotationDataLayer"],
                }
            atlasrelease_payloads["atlas_release"][
                atlasrelease_choice
            ].contribution = contribution

        # Add the generation prop for every different atlasRelease
        if new_atlas or (differentAtlasrelease and not atlasrelease_payloads["aibs_atlasrelease"]):
            if generation:
                atlasrelease_payloads["hierarchy"].generation = generation
                atlasrelease_payloads["atlas_release"][
                    atlasrelease_choice
                ].generation = generation
            if atlasrelease_payloads["fetched"]:
                resources_payloads["datasets_toUpdate"][
                    f"{const.schema_atlasrelease}"
                ].append(atlasrelease_payloads["atlas_release"][atlasrelease_choice])
            else:
                if new_atlas and resources_payloads["datasets_toPush"][f"{const.schema_atlasrelease}"]:
                   pass
                else:
                    resources_payloads["datasets_toPush"][
                        f"{const.schema_atlasrelease}"
                    ].append(atlasrelease_payloads["atlas_release"][atlasrelease_choice])

        if toUpdate:
            nrrd_resources["toUpdate"].append(nrrd_resource)
        else:
            nrrd_resources["toPush"].append(nrrd_resource)
        # =========================== Directory Datasets ===========================

        # If the input is a folder containing several dataset to push
        if isFolder:
            tot_resources = len(files_list_path)
            left_resources = tot_resources -1
            if left_resources:
                print("\nLooping over %d more input files ..." % left_resources)
            for f in range(1, tot_resources): # start at the 2nd file as the 1st is used for first_fetched_resource
                toUpdate = False
                fetched_resource_id = None
                fetched_resource_metadata = None
                brainLocation = copy.deepcopy(brainLocation_def)
                filepath_f = files_list_path[f]
                filename_noext = os.path.splitext(os.path.basename(filepath_f))[0]
                file_extension = os.path.splitext(os.path.basename(filepath_f))[1][1:]
                print("\nfile %d of %d: '%s'" % (f, left_resources, filename_noext))

                # ============ CELL DENSITY = TO REWORK LIKE THE OTHERS ============
                if resource_flag == "isCellDensity":
                    file_split = filename_noext.split("_")
                    content_type = f"application/{file_extension}"
                    distribution_file = forge.attach(filepath_f, content_type)
                    v = "mtypes_densities_probability_map_ccfv2_correctednissl"
                    try:
                        if os.path.samefile(
                            directory,
                            volumes["mtypes_densities_profile_ccfv2_correctednissl"],
                        ) or os.path.samefile(
                            directory,
                            volumes[v],
                        ):
                            file_split.insert(0, "Mtype")
                    except FileNotFoundError:
                        pass
                    dataset_dict = volumetric_dict["cell_densities"][dataset]
                    description = (f"{filename_noext} volume for the {dataset_dict['description']}.")
                    if atlasrelease_choice == "atlasrelease_ccfv2":
                        filename_noext = f"{filename_noext} Ccfv2 Corrected Nissl"
                    if fetched_resources:
                        #print("fetched_resources:", fetched_resources)
                        for res in fetched_resources:
                            if first_fetched_resource and (res.id == first_fetched_resource.id):
                                continue
                            if files_list[f] == res.distribution.name:
                                toUpdate = True
                                fetched_resource_id = res.id
                                fetched_resource_metadata = res._store_metadata

                if resource_flag == "isPH":
                    # Do not create specific payload for the json report because it is
                    # included with the problematic mask
                    if f >= 8:
                        break
                    filename_noext = f"{filename_noext} {suffixe}"
                    if f <= 5:
                        layer_number = re.findall(r"\d+", files_list[f])
                        description = dataset_dict["description"]
                        description = description.replace("XX", layer_number[0])
                        for layer_nbr, layer_id in const.isocortex_layers.items():
                            if layer_nbr == layer_number[0]:
                                layer = {
                                    "@id": layer_id,
                                    "label": f"layer {layer_nbr}",
                                }
                                brainLocation["layer"] = layer
                                pass
                    if f == 6:
                        description = (
                            "Volume containing for each voxel its distance from the "
                            f"bottom of the {annotation_description} Isocortex. The "
                            "bottom being the deepest part of the Isocortex (highest "
                            "cortical depth)."
                        )
                        layer_number = re.findall(r"\d+", files_list[f])
                    if fetched_resources:
                        try:
                            fetched_resource_id = fetched_resources[
                                f"{layer_number[0]}"
                            ].id
                            fetched_resource_metadata = fetched_resources[
                                f"{layer_number[0]}"
                            ]._store_metadata
                            toUpdate = True
                            filepath_hash = return_file_hash(filepath_f)
                            try:
                                if (
                                    filepath_hash
                                    != fetched_resources[
                                        f"{layer_number[0]}"
                                    ].distribution.digest.value
                                ):
                                    content_type = f"application/{file_extension}"
                                    distribution_file = forge.attach(
                                        filepath_f, content_type
                                    )
                                else:
                                    distribution_file = fetched_resources[
                                        f"{layer_number[0]}"
                                    ].distribution
                            except AttributeError:
                                content_type = f"application/{file_extension}"
                                distribution_file = forge.attach(filepath_f, content_type)
                        except KeyError:
                            toUpdate = False
                            content_type = f"application/{file_extension}"
                            distribution_file = forge.attach(filepath_f, content_type)
                        except IndexError:
                            toUpdate = False
                            content_type = f"application/{file_extension}"
                            distribution_file = forge.attach(filepath_f, content_type)
                    else:
                        content_type = f"application/{file_extension}"
                        distribution_file = forge.attach(filepath_f, content_type)
                    if f == 7:
                        description = (
                            f"3D mask volume of the {annotation_description}. It "
                            "includes Isocortex problematic voxels along with the "
                            "distance JSON report containing the proportion of "
                            "problematic voxels. Problematic voxels are highlighted "
                            "during the placement-hints computation and correspond to "
                            "voxels with at least one distance-related problem (i.e "
                            "those who do not intersect with the bottom or top mesh, "
                            "those with a distance gap greater than the maximum "
                            "thickness...)."
                        )
                if resource_flag == "isRegionMask":
                    try:
                        region_id = int(filename_noext)
                    except ValueError as error:
                        logger.error(
                            f"ValueError in '{filepath_f}' file name. {error}. "
                            "The mask file names have to be integer "
                            "representing their region"
                        )
                        exit(1)
                    try:
                        region_name, hierarchy_tree = get_brain_region_prop(
                            region_id, ["name"], hierarchy_path, flat_tree
                        )
                        region_name = region_name["name"]
                    except KeyError as e:
                        logger.error(f"KeyError: {e}")
                        exit(1)
                    logger.info(f"Creating the Mask payload for region {region_id}...")
                    description = (
                        f"Binary mask volume - {region_name.title()} (ID: "
                        f"{region_id}) - for the "
                        f"{dataset_dict['description']}."
                    )
                    name = f"{region_name.title()} Mask {suffixe}"
                    brainLocation["brainRegion"]["@id"] = f"mba:{region_id}"
                    brainLocation["brainRegion"]["label"] = f"{region_name}"
                    if fetched_resources:
                        try:
                            fetched_resource_id = fetched_resources[f"{region_id}"].id
                            fetched_resource_metadata = fetched_resources[
                                f"{region_id}"
                            ]._store_metadata
                            toUpdate = True
                            filepath_hash = return_file_hash(filepath_f)
                            try:
                                if (
                                    filepath_hash
                                    != fetched_resources[
                                        f"{region_id}"
                                    ].distribution.digest.value
                                ):
                                    content_type = f"application/{file_extension}"
                                    distribution_file = forge.attach(
                                        filepath_f, content_type
                                    )
                                else:
                                    distribution_file = fetched_resources[
                                        f"{region_id}"
                                    ].distribution
                            except AttributeError:
                                content_type = f"application/{file_extension}"
                                distribution_file = forge.attach(filepath_f, content_type)
                        except KeyError:
                            toUpdate = False
                            content_type = f"application/{file_extension}"
                            distribution_file = forge.attach(filepath_f, content_type)
                    else:
                        content_type = f"application/{file_extension}"
                        distribution_file = forge.attach(filepath_f, content_type)

                # Use forge.reshape instead ?
                nrrd_resource = Resource(
                    type = nrrd_resource.type,
                    name = filename_noext,
                    distribution = distribution_file,
                    description = description,
                    contribution = nrrd_resource.contribution,
                    isRegisteredIn = nrrd_resource.isRegisteredIn,
                    brainLocation = brainLocation,
                    atlasRelease = nrrd_resource.atlasRelease,
                    componentEncoding = nrrd_resource.componentEncoding,
                    fileExtension = nrrd_resource.fileExtension,
                    dimension = nrrd_resource.dimension,
                    sampleType = nrrd_resource.sampleType,
                    worldMatrix = nrrd_resource.worldMatrix,
                    resolution = nrrd_resource.resolution,
                    bufferEncoding = nrrd_resource.bufferEncoding,
                    endianness = nrrd_resource.endianness,
                    dataSampleModality = nrrd_resource.dataSampleModality,
                    subject = nrrd_resource.subject,
                )

                if resource_flag == "isCellDensity":
                    nrrd_resource.annotation = get_cellAnnotation(forge, filename_noext)
                    nrrd_resource.cellType = get_cellType(forge, filename_noext)
                    nrrd_resource.brainLocation["layer"] = get_layer(forge, nrrd_resource.cellType[0]["label"])

                if resource_flag == "isPH":
                    if 5 < f < 8:
                        try:
                            header = nrrd.read_header(filepath_f)
                        except nrrd.errors.NRRDError as e:
                            logger.error(f"NrrdError: {e}")
                            logger.info("Aborting pushing process.")
                            exit(1)
                        config["file_extension"] = os.path.splitext(
                            os.path.basename(files_list[f])
                        )[1][1:]
                        voxel_type = dataset_dict["voxel_type_2"]
                        nrrd_resource = add_nrrd_props(
                            nrrd_resource, header, config, voxel_type
                        )
                    if f >= 7:
                        nrrd_resource.dataSampleModality = dataset_dict[
                            "datasamplemodality_2"
                        ]
                        nrrd_resource.type = dataset_dict["type_2"]
                        # Compare and attach the multiple distributions
                        report_json = os.path.join(directory, files_list[8])
                        format_json = os.path.splitext(os.path.basename(report_json))[
                            1
                        ][1:]
                        report_json_hash = return_file_hash(report_json)
                        filepath_hash = return_file_hash(filepath_f)
                        report_content_type = f"application/{format_json}"
                        ph_report_distrib = {
                            f"{report_content_type}": (report_json_hash, report_json),
                            f"{content_type}": (filepath_hash, filepath_f),
                        }
                        distribution_file = []
                        if fetched_resources:
                            try:
                                fetched_resource_id = fetched_resources["report"].id
                                fetched_resource_metadata = fetched_resources[
                                    "report"
                                ]._store_metadata
                                toUpdate = True
                                if fetched_resources["report"].distribution:
                                    if not isinstance(
                                        fetched_resources["report"].distribution, list
                                    ):
                                        fetched_resources["report"].distribution = [
                                            fetched_resources["report"].distribution
                                        ]
                                for fetched_distrib in fetched_resources[
                                    "report"
                                ].distribution:
                                    try:
                                        if (
                                            fetched_distrib.digest.value
                                            != ph_report_distrib[
                                                fetched_distrib.encodingFormat
                                            ][0]
                                        ):
                                            distribution_report = forge.attach(
                                                ph_report_distrib[
                                                    fetched_distrib.encodingFormat
                                                ][1],
                                                fetched_distrib.encodingFormat,
                                            )
                                            distribution_file.append(
                                                distribution_report
                                            )
                                        else:
                                            # If the distribution is the same, keep it
                                            distribution_file.append(fetched_distrib)
                                        ph_report_distrib.pop(
                                            fetched_distrib.encodingFormat
                                        )
                                    # If the distribution is empty
                                    except AttributeError:
                                        pass
                                    except KeyError:
                                        pass
                                # If still keys in it then attach the remaining
                                # files
                                if ph_report_distrib:
                                    for encoding, file in ph_report_distrib.items():
                                        distribution_report = forge.attach(
                                            file[1],
                                            encoding,
                                        )
                                        distribution_file.append(distribution_report)
                            except KeyError:
                                toUpdate = False
                                for encoding, file in ph_report_distrib.items():
                                    distribution_report = forge.attach(
                                        file[1], encoding
                                    )
                                    distribution_file.append(distribution_report)
                        else:
                            for encoding, file in ph_report_distrib.items():
                                distribution_report = forge.attach(file[1], encoding)
                                distribution_file.append(distribution_report)
                        nrrd_resource.distribution = distribution_file

                if derivation:
                    nrrd_resource.derivation = nrrd_resource.derivation

                if fetched_resource_id:
                    nrrd_resource.id = fetched_resource_id
                elif dataset_name in deriv_dict_id.keys():
                    nrrd_resource.id = deriv_dict_id[dataset_name]["id"]
                else:
                    print("No nrrd_resource.id set for", filename_noext)

                if fetched_resource_metadata:
                    nrrd_resource._store_metadata = fetched_resource_metadata
                else:
                    print("No metadata for nrrd_resource.name: '%s'" % nrrd_resource.name)

                if generation:
                    nrrd_resource.generation = generation

                if resource_flag == "isRegionMask":
                    # Finish to fill the link_region_path file with the masks @ids
                    if action_summary_file:
                        if hasattr(nrrd_resource, "id"):
                            mask_id = nrrd_resource.id
                        else:
                            mask_id = forge.format(
                                "identifier", "volumetricdatalayer", str(uuid4())
                            )
                            nrrd_resource.id = mask_id
                        mask_link = {"mask": {"@id": mask_id}}
                        if action_summary_file == "append":
                            try:
                                if (
                                    "mask"
                                    not in link_summary_content[f"{region_id}"].keys()
                                ):
                                    link_summary_content[f"{region_id}"].update(
                                        mask_link
                                    )
                                else:
                                    link_summary_content[f"{region_id}"] = mask_link
                            except KeyError:
                                link_summary_content[f"{region_id}"] = mask_link
                        else:
                            region_summary = {
                                f"{region_id}": {
                                    "mask": {"@id": mask_id},
                                }
                            }
                            link_summary_content.update(region_summary)
                    if f == len(files_list) - 1:
                        link_summary_file = open(link_regions_path, "w")
                        link_summary_file.write(
                            json.dumps(
                                link_summary_content, ensure_ascii=False, indent=2
                            )
                        )
                        link_summary_file.close()

                if toUpdate:
                    nrrd_resources["toUpdate"].append(nrrd_resource)
                else:
                    nrrd_resources["toPush"].append(nrrd_resource)


        unresolved = []
        for action in actions:
            for res in nrrd_resources[action]:
                if (resource_flag == "isCellDensity"):
                    unres = False
                    # check for unresolved cell-types
                    for ct in res.cellType:
                        if not ct["@id"]:
                            unres = True
                            unresolved.append(res)
                    # check for unresolved layers
                    for layer in nrrd_resource.brainLocation["layer"]:
                        if not layer["@id"]:
                            unres = True
                            unresolved.append(res)
                    if unres:
                        continue
                if new_atlas:
                    resources_payloads["datasets_toPush"][f"{const.schema_volumetricdatalayer}"].append(res)
                else:
                    resources_payloads["datasets_"+action][f"{const.schema_volumetricdatalayer}"].append(res)

        if unresolved:
            unresolved_dir = "unresolved_densities"
            create_unresolved_payload(forge, unresolved, "unresolved_densities", filepath)
        else:
            print("No unresolved resources!")

    pushOrUpdate = False
    for action in actions:
        if resources_payloads["datasets_"+action][f"{const.schema_volumetricdatalayer}"]:
            pushOrUpdate = True

    if not pushOrUpdate:
        print(f"\nNone of the input datasets (with schema {const.schema_volumetricdatalayer}) differs from its corresponsing version in Nexus")
        return None

    # Return the atlas spatial reference system resource
    spatialref_resource = const.return_spatial_reference(forge)
    spatialref_resource.contribution = contribution
    if spatialref_resource._store_metadata:
        resources_payloads["datasets_toUpdate"][const.schema_spatialref].append(
            spatialref_resource)
    else:
        resources_payloads["datasets_toPush"][const.schema_spatialref].append(
            spatialref_resource)

    resources_payloads["tag"] = atlasrelease_payloads["tag"]
    if getattr(activity_resource, "_store_metadata", None):
        print("\nactivity_resource._store_metadata:", activity_resource._store_metadata)
    else:
        print("\nactivity_resource:", activity_resource)
    resources_payloads["activity"] = activity_resource

    # Annotate the atlasrelease_config json file with the atlasrelease "id" and "tag"
    # TODO Turn it into a function annotate_atlasrelease_file
    if (
        not isinstance(forge._store, DemoStore)
        and not atlasrelease_payloads["aibs_atlasrelease"]
    ):
        if atlasrelease_config_path:
            #print("\natlasrelease_payloads: %s" % atlasrelease_payloads)
            atlasrelease_id = atlasrelease_payloads["atlas_release"][
                freeze(atlasrelease_choice)
            ].id
            atlasrelease_link = {
                f"{atlasrelease_choice}": {
                    "id": atlasrelease_id,
                    "tag": atlasrelease_payloads["tag"],
                }
            }
            try:
                with open(atlasrelease_config_path) as atlasrelease_config_file:
                    atlasrelease_config_content = json.loads(
                        atlasrelease_config_file.read()
                    )
                    if atlasrelease_choice in atlasrelease_config_content.keys():
                        atlasrelease_config_content[
                            f"{atlasrelease_choice}"
                        ] = atlasrelease_link[f"{atlasrelease_choice}"]
                    else:
                        atlasrelease_config_content.update(atlasrelease_link)
                #with open(atlasrelease_config_path, "w") as atlasrelease_config_file:
                #    atlasrelease_config_file.write(json.dumps(
                #        atlasrelease_config_content, ensure_ascii=False, indent=2
                #    ))
            except FileNotFoundError:
                with open(atlasrelease_config_path, "w") as atlasrelease_config_file:
                    atlasrelease_config_file.write(
                        json.dumps(atlasrelease_link, ensure_ascii=False, indent=2)
                    )
            except json.decoder.JSONDecodeError as error:
                logger.error(f"{error} when opening the input atlasrelease json file.")
                exit(1)

    return resources_payloads


def add_nrrd_props(resource, nrrd_header, config, voxel_type):
    """
    Add to the resource all the fields expected for a VolumetricDataLayer/NdRaster
    that can be found in the NRRD header. A resource dictionary must exist and be
    provided (even if empty).

    Parameters:
        resource : Resource object defined by a properties payload linked to a file.
        nrrd_header : Dict containing the input file header fields  and their
                    corresponding value.
        config : Dict containing the file extension and its sampling informations.
        voxel_type : String indicating the type of voxel contained in the volumetric
                     dataset.

    Returns:
        dataset : Resource object with all Nrrd properties added.
    """

    NRRD_TYPES_TO_NUMPY = {
        "signed char": "int8",
        "int8": "int8",
        "int8_t": "int8",
        "uchar": "uint8",
        "unsigned char": "uint8",
        "uint8": "uint8",
        "uint8_t": "uint8",
        "short": "int16",
        "short int": "int16",
        "signed short": "int16",
        "signed short int": "int16",
        "int16": "int16",
        "int16_t": "int16",
        "ushort": "int16",
        "unsigned short": "uint16",
        "unsigned short int": "uint16",
        "uint16": "uint16",
        "uint16_t": "uint16",
        "int": "int32",
        "signed int": "int32",
        "int32": "int32",
        "int32_t": "int32",
        "uint": "uint32",
        "unsigned int": "uint32",
        "uint32": "uint32",
        "uint32_t": "uint32",
        "longlong": "int64",
        "long long": "int64",
        "long long int": "int64",
        "signed long long": "int64",
        "signed long long int": "int64",
        "int64": "int64",
        "int64_t": "int64",
        "ulonglong": "uint64",
        "unsigned long long": "uint64",
        "unsigned long long int": "uint64",
        "uint64": "uint64",
        "uint64_t": "uint64",
        "float": "float32",
        "double": "float64",
    }

    space_origin = None
    if "space origin" in nrrd_header:
        space_origin = nrrd_header["space origin"].tolist()
    else:
        if nrrd_header["dimension"] == 2:
            space_origin = [0.0, 0.0]
        elif nrrd_header["dimension"] == 3:
            space_origin = [0.0, 0.0, 0.0]

    space_directions = None
    if "space directions" in nrrd_header:
        # replace the nan that pynrrd adds to None (just like in NRRD spec)
        space_directions = []
        for col in nrrd_header["space directions"].tolist():
            if np.isnan(col).any():
                space_directions.append(None)
            else:
                space_directions.append(col)

    # Here, 'space directions' being missing in the file, we hardcode an identity matrix
    # If we have 4 dimensions, we say
    else:
        if nrrd_header["dimension"] == 2:
            space_directions = [[1, 0], [0, 1]]
        elif nrrd_header["dimension"] == 3:
            space_directions = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        elif nrrd_header["dimension"] == 4:
            # the following is a very lousy way to determine if among the 4 dims,
            # or the first is components or the last is time...
            if nrrd_header["sizes"][0] < (np.mean(nrrd_header["sizes"] * 0.20)):
                space_directions = [None, [1, 0, 0], [0, 1, 0], [0, 0, 1]]  # component
            else:
                space_directions = [[1, 0, 0], [0, 1, 0], [0, 0, 1], None]  # time

        elif nrrd_header["dimension"] == 5:
            space_directions = [None, [1, 0, 0], [0, 1, 0], [0, 0, 1], None]

    resource.componentEncoding = NRRD_TYPES_TO_NUMPY[nrrd_header["type"]]
    # in case the nrrd file corresponds to a mask
    try:
        resource.endianness = nrrd_header["endian"]
    except KeyError:
        resource.endianness = "little"
    resource.bufferEncoding = nrrd_header["encoding"]
    resource.fileExtension = config["file_extension"]
    resource.dimension = []

    component_dim_index = -1
    passed_spatial_dim = False
    # for each dimension
    for i in range(0, nrrd_header["dimension"]):
        current_dim = {}
        current_dim["size"] = nrrd_header["sizes"][i].item()

        # this is a spatial dim
        if space_directions[i]:
            passed_spatial_dim = True
            current_dim["@type"] = "SpaceDimension"
            current_dim["unitCode"] = config["sampling_space_unit"]

        # this can be a component or a time dim
        else:
            # this is a time dim as it is located after space dim)
            if passed_spatial_dim:
                current_dim["@type"] = "TimeDimension"
                current_dim["samplingPeriod"] = config["sampling_period"]
                current_dim["unitCode"] = config["sampling_time_unit"]

            # this is a component dim as it is located before space dim
            else:
                # decide of the label
                component_dim_index = i
                current_dim["@type"] = "ComponentDimension"
                # current_dim["name"] = default_sample_type_multiple_components if
                # current_dim["size"] > 1 else default_sample_type_single_component
                try:
                    current_dim["name"] = get_voxel_type(
                        voxel_type, current_dim["size"]
                    )
                except ValueError as e:
                    logger.error(f"ValueError: {e}")
                    exit(1)
                except KeyError as e:
                    logger.error(f"KeyError: {e}")
                    exit(1)

        resource.dimension.append(current_dim)

    # repeating the name of the component dimension in the "sampleType" base level prop
    if component_dim_index >= 0:
        resource.sampleType = resource.dimension[component_dim_index]["name"]

    # As no component dim was mentioned in metadata, it means the component is of size 1
    else:
        # prepend a dimension component
        try:
            name = get_voxel_type(voxel_type, 1)
        except ValueError as e:
            logger.error(f"ValueError: {e}")
            exit(1)
        component_dim = {"@type": "ComponentDimension", "size": 1, "name": name}
        resource.dimension.insert(0, component_dim)

        resource.sampleType = component_dim["name"]

    # creating the world matrix (column major)
    # 1. pynrrd creates a [nan, nan, nan] line for each 'space directions' that is
    # 'none' in the header.
    # We have to strip them off.
    worldMatrix = None
    r = []  # rotation mat
    o = space_origin
    for col in space_directions:
        if col is not None:
            r.append(col)

    # if 3D, we create a 4x4 homogeneous transformation matrix
    if len(r) == 3:
        worldMatrix = [
            r[0][0],
            r[0][1],
            r[0][2],
            0,
            r[1][0],
            r[1][1],
            r[1][2],
            0,
            r[2][0],
            r[2][1],
            r[2][2],
            0,
            o[0],
            o[1],
            o[2],
            1,
        ]

    # if 2D, we create a 3x3 homogeneous transformation matrix
    if len(r) == 2:
        worldMatrix = [r[0][0], r[0][1], 0, r[1][0], r[1][1], 0, o[0], o[1], 1]

    # nesting the matrix values into object with @value props
    for i in range(0, len(worldMatrix)):
        # worldMatrix[i] = {"@value": float(worldMatrix[i])}
        worldMatrix[i] = float(worldMatrix[i])

    resource.worldMatrix = worldMatrix

    resource.resolution = {"value": r[0][0], "unitCode": config["sampling_space_unit"]}

    return resource


def get_cellAnnotation(forge, label):
    annotations = []

    types = ["M", "E"] # assuming same order of cellTypes:
    cellTypes = get_cellType(forge, label)
    for i in range(len(cellTypes)):
        itype = types[i] if i<len(types) else "Unknown"
        annotation = return_base_annotation(itype)
        annotation["hasBody"].update(cellTypes[i])

        annotations.append(annotation)

    return annotations


def get_cellType(forge, name):
    label = (name.split("densit")[0])[:-1]
    types = label.split("-")
    if len(types) > 2:
        mtype = "-".join(types[0:-1])
        etype = types[-1]
        me_types = [mtype, etype]
    else:
        me_types = types
    # need to fix etype filename production
    me_types[-1] = me_types[-1][0].lower() + me_types[-1][1:]

    cellTypes = []
    for t in me_types:
        cellType = resolve_cellType(forge, t, name)
        cellTypes.append(cellType)

    return cellTypes

